// Autogenerated by Thrift Compiler ()
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrifttest

import (
	"bytes"
	"fmt"
	"github.com/upfluence/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type ThriftTest interface {
	// Prints "testVoid()" and returns nothing.
	TestVoid(ctx thrift.Context) (err error)
	// Prints 'testString("%s")' with thing as '%s'
	// @param string thing - the string to print
	// @return string - returns the string 'thing'
	//
	// Parameters:
	//  - Thing
	TestString(ctx thrift.Context, thing string) (res string, err error)
	// Prints 'testByte("%d")' with thing as '%d'
	// @param byte thing - the byte to print
	// @return byte - returns the byte 'thing'
	//
	// Parameters:
	//  - Thing
	TestByte(ctx thrift.Context, thing int8) (res int8, err error)
	// Prints 'testI32("%d")' with thing as '%d'
	// @param i32 thing - the i32 to print
	// @return i32 - returns the i32 'thing'
	//
	// Parameters:
	//  - Thing
	TestI32(ctx thrift.Context, thing int32) (res int32, err error)
	// Prints 'testI64("%d")' with thing as '%d'
	// @param i64 thing - the i64 to print
	// @return i64 - returns the i64 'thing'
	//
	// Parameters:
	//  - Thing
	TestI64(ctx thrift.Context, thing int64) (res int64, err error)
	// Prints 'testDouble("%f")' with thing as '%f'
	// @param double thing - the double to print
	// @return double - returns the double 'thing'
	//
	// Parameters:
	//  - Thing
	TestDouble(ctx thrift.Context, thing float64) (res float64, err error)
	// Prints 'testBinary("%s")' where '%s' is a hex-formatted string of thing's data
	// @param binary  thing - the binary data to print
	// @return binary  - returns the binary 'thing'
	//
	// Parameters:
	//  - Thing
	TestBinary(ctx thrift.Context, thing []byte) (res []byte, err error)
	// Prints 'testStruct("{%s}")' where thing has been formatted into a string of comma separated values
	// @param Xtruct thing - the Xtruct to print
	// @return Xtruct - returns the Xtruct 'thing'
	//
	// Parameters:
	//  - Thing
	TestStruct(ctx thrift.Context, thing *Xtruct) (res *Xtruct, err error)
	// Prints 'testNest("{%s}")' where thing has been formatted into a string of the nested struct
	// @param Xtruct2 thing - the Xtruct2 to print
	// @return Xtruct2 - returns the Xtruct2 'thing'
	//
	// Parameters:
	//  - Thing
	TestNest(ctx thrift.Context, thing *Xtruct2) (res *Xtruct2, err error)
	// Prints 'testMap("{%s")' where thing has been formatted into a string of  'key => value' pairs
	//  separated by commas and new lines
	// @param map<i32,i32> thing - the map<i32,i32> to print
	// @return map<i32,i32> - returns the map<i32,i32> 'thing'
	//
	// Parameters:
	//  - Thing
	TestMap(ctx thrift.Context, thing map[int32]int32) (res map[int32]int32, err error)
	// Prints 'testStringMap("{%s}")' where thing has been formatted into a string of  'key => value' pairs
	//  separated by commas and new lines
	// @param map<string,string> thing - the map<string,string> to print
	// @return map<string,string> - returns the map<string,string> 'thing'
	//
	// Parameters:
	//  - Thing
	TestStringMap(ctx thrift.Context, thing map[string]string) (res map[string]string, err error)
	// Prints 'testSet("{%s}")' where thing has been formatted into a string of  values
	//  separated by commas and new lines
	// @param set<i32> thing - the set<i32> to print
	// @return set<i32> - returns the set<i32> 'thing'
	//
	// Parameters:
	//  - Thing
	TestSet(ctx thrift.Context, thing map[int32]bool) (res map[int32]bool, err error)
	// Prints 'testList("{%s}")' where thing has been formatted into a string of  values
	//  separated by commas and new lines
	// @param list<i32> thing - the list<i32> to print
	// @return list<i32> - returns the list<i32> 'thing'
	//
	// Parameters:
	//  - Thing
	TestList(ctx thrift.Context, thing []int32) (res []int32, err error)
	// Prints 'testEnum("%d")' where thing has been formatted into it's numeric value
	// @param Numberz thing - the Numberz to print
	// @return Numberz - returns the Numberz 'thing'
	//
	// Parameters:
	//  - Thing
	TestEnum(ctx thrift.Context, thing Numberz) (res Numberz, err error)
	// Prints 'testTypedef("%d")' with thing as '%d'
	// @param UserId thing - the UserId to print
	// @return UserId - returns the UserId 'thing'
	//
	// Parameters:
	//  - Thing
	TestTypedef(ctx thrift.Context, thing UserId) (res UserId, err error)
	// Prints 'testMapMap("%d")' with hello as '%d'
	// @param i32 hello - the i32 to print
	// @return map<i32,map<i32,i32>> - returns a dictionary with these values:
	//   {-4 => {-4 => -4, -3 => -3, -2 => -2, -1 => -1, }, 4 => {1 => 1, 2 => 2, 3 => 3, 4 => 4, }, }
	//
	// Parameters:
	//  - Hello
	TestMapMap(ctx thrift.Context, hello int32) (res map[int32]map[int32]int32, err error)
	// So you think you've got this all worked, out eh?
	//
	// Creates a the returned map with these values and prints it out:
	//   { 1 => { 2 => argument,
	//            3 => argument,
	//          },
	//     2 => { 6 => <empty Insanity struct>, },
	//   }
	// @return map<UserId, map<Numberz,Insanity>> - a map with the above values
	//
	// Parameters:
	//  - Argument
	TestInsanity(ctx thrift.Context, argument *Insanity) (res map[UserId]map[Numberz]*Insanity, err error)
	// Prints 'testMulti()'
	// @param byte arg0 -
	// @param i32 arg1 -
	// @param i64 arg2 -
	// @param map<i16, string> arg3 -
	// @param Numberz arg4 -
	// @param UserId arg5 -
	// @return Xtruct - returns an Xtruct with string_thing = "Hello2, byte_thing = arg0, i32_thing = arg1
	//    and i64_thing = arg2
	//
	// Parameters:
	//  - Arg0
	//  - Arg1
	//  - Arg2
	//  - Arg3
	//  - Arg4
	//  - Arg5
	TestMulti(ctx thrift.Context, arg0 int8, arg1 int32, arg2 int64, arg3 map[int16]string, arg4 Numberz, arg5 UserId) (res *Xtruct, err error)
	// Print 'testException(%s)' with arg as '%s'
	// @param string arg - a string indication what type of exception to throw
	// if arg == "Xception" throw Xception with errorCode = 1001 and message = arg
	// elsen if arg == "TException" throw TException
	// else do not throw anything
	//
	// Parameters:
	//  - Arg
	TestException(ctx thrift.Context, arg string) (err error)
	// Print 'testMultiException(%s, %s)' with arg0 as '%s' and arg1 as '%s'
	// @param string arg - a string indication what type of exception to throw
	// if arg0 == "Xception" throw Xception with errorCode = 1001 and message = "This is an Xception"
	// elsen if arg0 == "Xception2" throw Xception2 with errorCode = 2002 and message = "This is an Xception2"
	// else do not throw anything
	// @return Xtruct - an Xtruct with string_thing = arg1
	//
	// Parameters:
	//  - Arg0
	//  - Arg1
	TestMultiException(ctx thrift.Context, arg0 string, arg1 string) (res *Xtruct, err error)
	// Print 'testOneway(%d): Sleeping...' with secondsToSleep as '%d'
	// sleep 'secondsToSleep'
	// Print 'testOneway(%d): done sleeping!' with secondsToSleep as '%d'
	// @param i32 secondsToSleep - the number of seconds to sleep
	//
	// Parameters:
	//  - SecondsToSleep
	TestOneway(ctx thrift.Context, secondsToSleep int32) (err error)
}

var thriftTestServiceDefinition = thrift.ServiceDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "ThriftTest",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Functions: []thrift.FunctionDefinition{
		{
			Result: &thriftTestTestVoidResultStructDefinition,
			Args:   thriftTestTestVoidArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testVoid",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestStringResultStructDefinition,
			Args:   thriftTestTestStringArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testString",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestByteResultStructDefinition,
			Args:   thriftTestTestByteArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testByte",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestI32ResultStructDefinition,
			Args:   thriftTestTestI32ArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testI32",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestI64ResultStructDefinition,
			Args:   thriftTestTestI64ArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testI64",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestDoubleResultStructDefinition,
			Args:   thriftTestTestDoubleArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testDouble",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestBinaryResultStructDefinition,
			Args:   thriftTestTestBinaryArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testBinary",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestStructResultStructDefinition,
			Args:   thriftTestTestStructArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testStruct",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestNestResultStructDefinition,
			Args:   thriftTestTestNestArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testNest",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestMapResultStructDefinition,
			Args:   thriftTestTestMapArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testMap",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestStringMapResultStructDefinition,
			Args:   thriftTestTestStringMapArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testStringMap",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestSetResultStructDefinition,
			Args:   thriftTestTestSetArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testSet",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestListResultStructDefinition,
			Args:   thriftTestTestListArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testList",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestEnumResultStructDefinition,
			Args:   thriftTestTestEnumArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testEnum",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestTypedefResultStructDefinition,
			Args:   thriftTestTestTypedefArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testTypedef",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestMapMapResultStructDefinition,
			Args:   thriftTestTestMapMapArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testMapMap",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestInsanityResultStructDefinition,
			Args:   thriftTestTestInsanityArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testInsanity",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestMultiResultStructDefinition,
			Args:   thriftTestTestMultiArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testMulti",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestExceptionResultStructDefinition,
			Args:   thriftTestTestExceptionArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testException",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &thriftTestTestMultiExceptionResultStructDefinition,
			Args:   thriftTestTestMultiExceptionArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testMultiException",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			IsOneway: true,
			Args:     thriftTestTestOnewayArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "testOneway",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

type ThriftTestClient struct {
	thrift.TClient
}

func NewThriftTestClientFactoryProvider(p thrift.TClientProvider) (*ThriftTestClient, error) {
	cl, err := p.Build("thrift.test", "ThriftTest")

	if err != nil {
		return nil, err
	}

	return NewThriftTestClient(cl), nil
}

func NewThriftTestClient(cl thrift.TClient) *ThriftTestClient {
	return &ThriftTestClient{TClient: cl}
}

// Prints "testVoid()" and returns nothing.
func (p *ThriftTestClient) TestVoid(ctx thrift.Context) (err error) {
	args := ThriftTestTestVoidArgs{}
	result := ThriftTestTestVoidResult{}
	if err = p.CallBinary(ctx, "testVoid", &args, &result); err != nil {
		return err
	}

	return nil
}

// Prints 'testString("%s")' with thing as '%s'
// @param string thing - the string to print
// @return string - returns the string 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestString(ctx thrift.Context, thing string) (res string, err error) {
	args := ThriftTestTestStringArgs{
		Thing: thing,
	}
	result := ThriftTestTestStringResult{}
	if err = p.CallBinary(ctx, "testString", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testString failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testByte("%d")' with thing as '%d'
// @param byte thing - the byte to print
// @return byte - returns the byte 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestByte(ctx thrift.Context, thing int8) (res int8, err error) {
	args := ThriftTestTestByteArgs{
		Thing: thing,
	}
	result := ThriftTestTestByteResult{}
	if err = p.CallBinary(ctx, "testByte", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testByte failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testI32("%d")' with thing as '%d'
// @param i32 thing - the i32 to print
// @return i32 - returns the i32 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestI32(ctx thrift.Context, thing int32) (res int32, err error) {
	args := ThriftTestTestI32Args{
		Thing: thing,
	}
	result := ThriftTestTestI32Result{}
	if err = p.CallBinary(ctx, "testI32", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testI32 failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testI64("%d")' with thing as '%d'
// @param i64 thing - the i64 to print
// @return i64 - returns the i64 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestI64(ctx thrift.Context, thing int64) (res int64, err error) {
	args := ThriftTestTestI64Args{
		Thing: thing,
	}
	result := ThriftTestTestI64Result{}
	if err = p.CallBinary(ctx, "testI64", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testI64 failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testDouble("%f")' with thing as '%f'
// @param double thing - the double to print
// @return double - returns the double 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestDouble(ctx thrift.Context, thing float64) (res float64, err error) {
	args := ThriftTestTestDoubleArgs{
		Thing: thing,
	}
	result := ThriftTestTestDoubleResult{}
	if err = p.CallBinary(ctx, "testDouble", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testDouble failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testBinary("%s")' where '%s' is a hex-formatted string of thing's data
// @param binary  thing - the binary data to print
// @return binary  - returns the binary 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestBinary(ctx thrift.Context, thing []byte) (res []byte, err error) {
	args := ThriftTestTestBinaryArgs{
		Thing: thing,
	}
	result := ThriftTestTestBinaryResult{}
	if err = p.CallBinary(ctx, "testBinary", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testBinary failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testStruct("{%s}")' where thing has been formatted into a string of comma separated values
// @param Xtruct thing - the Xtruct to print
// @return Xtruct - returns the Xtruct 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestStruct(ctx thrift.Context, thing *Xtruct) (res *Xtruct, err error) {
	args := ThriftTestTestStructArgs{
		Thing: thing,
	}
	result := ThriftTestTestStructResult{}
	if err = p.CallBinary(ctx, "testStruct", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testStruct failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testNest("{%s}")' where thing has been formatted into a string of the nested struct
// @param Xtruct2 thing - the Xtruct2 to print
// @return Xtruct2 - returns the Xtruct2 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestNest(ctx thrift.Context, thing *Xtruct2) (res *Xtruct2, err error) {
	args := ThriftTestTestNestArgs{
		Thing: thing,
	}
	result := ThriftTestTestNestResult{}
	if err = p.CallBinary(ctx, "testNest", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testNest failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testMap("{%s")' where thing has been formatted into a string of  'key => value' pairs
//
//	separated by commas and new lines
//
// @param map<i32,i32> thing - the map<i32,i32> to print
// @return map<i32,i32> - returns the map<i32,i32> 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestMap(ctx thrift.Context, thing map[int32]int32) (res map[int32]int32, err error) {
	args := ThriftTestTestMapArgs{
		Thing: thing,
	}
	result := ThriftTestTestMapResult{}
	if err = p.CallBinary(ctx, "testMap", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testMap failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testStringMap("{%s}")' where thing has been formatted into a string of  'key => value' pairs
//
//	separated by commas and new lines
//
// @param map<string,string> thing - the map<string,string> to print
// @return map<string,string> - returns the map<string,string> 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestStringMap(ctx thrift.Context, thing map[string]string) (res map[string]string, err error) {
	args := ThriftTestTestStringMapArgs{
		Thing: thing,
	}
	result := ThriftTestTestStringMapResult{}
	if err = p.CallBinary(ctx, "testStringMap", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testStringMap failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testSet("{%s}")' where thing has been formatted into a string of  values
//
//	separated by commas and new lines
//
// @param set<i32> thing - the set<i32> to print
// @return set<i32> - returns the set<i32> 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestSet(ctx thrift.Context, thing map[int32]bool) (res map[int32]bool, err error) {
	args := ThriftTestTestSetArgs{
		Thing: thing,
	}
	result := ThriftTestTestSetResult{}
	if err = p.CallBinary(ctx, "testSet", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testSet failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testList("{%s}")' where thing has been formatted into a string of  values
//
//	separated by commas and new lines
//
// @param list<i32> thing - the list<i32> to print
// @return list<i32> - returns the list<i32> 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestList(ctx thrift.Context, thing []int32) (res []int32, err error) {
	args := ThriftTestTestListArgs{
		Thing: thing,
	}
	result := ThriftTestTestListResult{}
	if err = p.CallBinary(ctx, "testList", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testList failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testEnum("%d")' where thing has been formatted into it's numeric value
// @param Numberz thing - the Numberz to print
// @return Numberz - returns the Numberz 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestEnum(ctx thrift.Context, thing Numberz) (res Numberz, err error) {
	args := ThriftTestTestEnumArgs{
		Thing: thing,
	}
	result := ThriftTestTestEnumResult{}
	if err = p.CallBinary(ctx, "testEnum", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testEnum failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testTypedef("%d")' with thing as '%d'
// @param UserId thing - the UserId to print
// @return UserId - returns the UserId 'thing'
//
// Parameters:
//   - Thing
func (p *ThriftTestClient) TestTypedef(ctx thrift.Context, thing UserId) (res UserId, err error) {
	args := ThriftTestTestTypedefArgs{
		Thing: thing,
	}
	result := ThriftTestTestTypedefResult{}
	if err = p.CallBinary(ctx, "testTypedef", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testTypedef failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testMapMap("%d")' with hello as '%d'
// @param i32 hello - the i32 to print
// @return map<i32,map<i32,i32>> - returns a dictionary with these values:
//
//	{-4 => {-4 => -4, -3 => -3, -2 => -2, -1 => -1, }, 4 => {1 => 1, 2 => 2, 3 => 3, 4 => 4, }, }
//
// Parameters:
//   - Hello
func (p *ThriftTestClient) TestMapMap(ctx thrift.Context, hello int32) (res map[int32]map[int32]int32, err error) {
	args := ThriftTestTestMapMapArgs{
		Hello: hello,
	}
	result := ThriftTestTestMapMapResult{}
	if err = p.CallBinary(ctx, "testMapMap", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testMapMap failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// So you think you've got this all worked, out eh?
//
// Creates a the returned map with these values and prints it out:
//
//	{ 1 => { 2 => argument,
//	         3 => argument,
//	       },
//	  2 => { 6 => <empty Insanity struct>, },
//	}
//
// @return map<UserId, map<Numberz,Insanity>> - a map with the above values
//
// Parameters:
//   - Argument
func (p *ThriftTestClient) TestInsanity(ctx thrift.Context, argument *Insanity) (res map[UserId]map[Numberz]*Insanity, err error) {
	args := ThriftTestTestInsanityArgs{
		Argument: argument,
	}
	result := ThriftTestTestInsanityResult{}
	if err = p.CallBinary(ctx, "testInsanity", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testInsanity failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Prints 'testMulti()'
// @param byte arg0 -
// @param i32 arg1 -
// @param i64 arg2 -
// @param map<i16, string> arg3 -
// @param Numberz arg4 -
// @param UserId arg5 -
// @return Xtruct - returns an Xtruct with string_thing = "Hello2, byte_thing = arg0, i32_thing = arg1
//
//	and i64_thing = arg2
//
// Parameters:
//   - Arg0
//   - Arg1
//   - Arg2
//   - Arg3
//   - Arg4
//   - Arg5
func (p *ThriftTestClient) TestMulti(ctx thrift.Context, arg0 int8, arg1 int32, arg2 int64, arg3 map[int16]string, arg4 Numberz, arg5 UserId) (res *Xtruct, err error) {
	args := ThriftTestTestMultiArgs{
		Arg0: arg0,
		Arg1: arg1,
		Arg2: arg2,
		Arg3: arg3,
		Arg4: arg4,
		Arg5: arg5,
	}
	result := ThriftTestTestMultiResult{}
	if err = p.CallBinary(ctx, "testMulti", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testMulti failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Print 'testException(%s)' with arg as '%s'
// @param string arg - a string indication what type of exception to throw
// if arg == "Xception" throw Xception with errorCode = 1001 and message = arg
// elsen if arg == "TException" throw TException
// else do not throw anything
//
// Parameters:
//   - Arg
func (p *ThriftTestClient) TestException(ctx thrift.Context, arg string) (err error) {
	args := ThriftTestTestExceptionArgs{
		Arg: arg,
	}
	result := ThriftTestTestExceptionResult{}
	if err = p.CallBinary(ctx, "testException", &args, &result); err != nil {
		return err
	}

	if result.Err1 != nil {
		return result.Err1
	}
	return nil
}

// Print 'testMultiException(%s, %s)' with arg0 as '%s' and arg1 as '%s'
// @param string arg - a string indication what type of exception to throw
// if arg0 == "Xception" throw Xception with errorCode = 1001 and message = "This is an Xception"
// elsen if arg0 == "Xception2" throw Xception2 with errorCode = 2002 and message = "This is an Xception2"
// else do not throw anything
// @return Xtruct - an Xtruct with string_thing = arg1
//
// Parameters:
//   - Arg0
//   - Arg1
func (p *ThriftTestClient) TestMultiException(ctx thrift.Context, arg0 string, arg1 string) (res *Xtruct, err error) {
	args := ThriftTestTestMultiExceptionArgs{
		Arg0: arg0,
		Arg1: arg1,
	}
	result := ThriftTestTestMultiExceptionResult{}
	if err = p.CallBinary(ctx, "testMultiException", &args, &result); err != nil {
		return res, err
	}

	if result.Err1 != nil {
		return res, result.Err1
	} else if result.Err2 != nil {
		return res, result.Err2
	}
	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testMultiException failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Print 'testOneway(%d): Sleeping...' with secondsToSleep as '%d'
// sleep 'secondsToSleep'
// Print 'testOneway(%d): done sleeping!' with secondsToSleep as '%d'
// @param i32 secondsToSleep - the number of seconds to sleep
//
// Parameters:
//   - SecondsToSleep
func (p *ThriftTestClient) TestOneway(ctx thrift.Context, secondsToSleep int32) (err error) {
	args := ThriftTestTestOnewayArgs{
		SecondsToSleep: secondsToSleep,
	}
	return p.CallUnary(ctx, "testOneway", &args)
}

func NewThriftTestProcessorProvider(handler ThriftTest, provider thrift.TProcessorProvider) (thrift.TProcessor, error) {
	p, err := provider.Build("thrift.test", "ThriftTest")
	if err != nil {
		return nil, err
	}

	return NewThriftTestProcessorFactory(handler, p), nil
}

func NewThriftTestProcessor(handler ThriftTest, middlewares []thrift.TMiddleware) thrift.TProcessor {
	p := thrift.NewTStandardProcessor(middlewares)
	return NewThriftTestProcessorFactory(handler, p)
}

func NewThriftTestProcessorFactory(handler ThriftTest, p thrift.TProcessor) thrift.TProcessor {
	p.AddProcessor(
		"testVoid",
		thrift.NewTBinaryProcessorFunction(p, "testVoid", func() thrift.TRequest { return &ThriftTestTestVoidArgs{} }, &thriftTestProcessorTestVoid{handler: handler}),
	)
	p.AddProcessor(
		"testString",
		thrift.NewTBinaryProcessorFunction(p, "testString", func() thrift.TRequest { return &ThriftTestTestStringArgs{} }, &thriftTestProcessorTestString{handler: handler}),
	)
	p.AddProcessor(
		"testByte",
		thrift.NewTBinaryProcessorFunction(p, "testByte", func() thrift.TRequest { return &ThriftTestTestByteArgs{} }, &thriftTestProcessorTestByte{handler: handler}),
	)
	p.AddProcessor(
		"testI32",
		thrift.NewTBinaryProcessorFunction(p, "testI32", func() thrift.TRequest { return &ThriftTestTestI32Args{} }, &thriftTestProcessorTestI32{handler: handler}),
	)
	p.AddProcessor(
		"testI64",
		thrift.NewTBinaryProcessorFunction(p, "testI64", func() thrift.TRequest { return &ThriftTestTestI64Args{} }, &thriftTestProcessorTestI64{handler: handler}),
	)
	p.AddProcessor(
		"testDouble",
		thrift.NewTBinaryProcessorFunction(p, "testDouble", func() thrift.TRequest { return &ThriftTestTestDoubleArgs{} }, &thriftTestProcessorTestDouble{handler: handler}),
	)
	p.AddProcessor(
		"testBinary",
		thrift.NewTBinaryProcessorFunction(p, "testBinary", func() thrift.TRequest { return &ThriftTestTestBinaryArgs{} }, &thriftTestProcessorTestBinary{handler: handler}),
	)
	p.AddProcessor(
		"testStruct",
		thrift.NewTBinaryProcessorFunction(p, "testStruct", func() thrift.TRequest { return &ThriftTestTestStructArgs{} }, &thriftTestProcessorTestStruct{handler: handler}),
	)
	p.AddProcessor(
		"testNest",
		thrift.NewTBinaryProcessorFunction(p, "testNest", func() thrift.TRequest { return &ThriftTestTestNestArgs{} }, &thriftTestProcessorTestNest{handler: handler}),
	)
	p.AddProcessor(
		"testMap",
		thrift.NewTBinaryProcessorFunction(p, "testMap", func() thrift.TRequest { return &ThriftTestTestMapArgs{} }, &thriftTestProcessorTestMap{handler: handler}),
	)
	p.AddProcessor(
		"testStringMap",
		thrift.NewTBinaryProcessorFunction(p, "testStringMap", func() thrift.TRequest { return &ThriftTestTestStringMapArgs{} }, &thriftTestProcessorTestStringMap{handler: handler}),
	)
	p.AddProcessor(
		"testSet",
		thrift.NewTBinaryProcessorFunction(p, "testSet", func() thrift.TRequest { return &ThriftTestTestSetArgs{} }, &thriftTestProcessorTestSet{handler: handler}),
	)
	p.AddProcessor(
		"testList",
		thrift.NewTBinaryProcessorFunction(p, "testList", func() thrift.TRequest { return &ThriftTestTestListArgs{} }, &thriftTestProcessorTestList{handler: handler}),
	)
	p.AddProcessor(
		"testEnum",
		thrift.NewTBinaryProcessorFunction(p, "testEnum", func() thrift.TRequest { return &ThriftTestTestEnumArgs{} }, &thriftTestProcessorTestEnum{handler: handler}),
	)
	p.AddProcessor(
		"testTypedef",
		thrift.NewTBinaryProcessorFunction(p, "testTypedef", func() thrift.TRequest { return &ThriftTestTestTypedefArgs{} }, &thriftTestProcessorTestTypedef{handler: handler}),
	)
	p.AddProcessor(
		"testMapMap",
		thrift.NewTBinaryProcessorFunction(p, "testMapMap", func() thrift.TRequest { return &ThriftTestTestMapMapArgs{} }, &thriftTestProcessorTestMapMap{handler: handler}),
	)
	p.AddProcessor(
		"testInsanity",
		thrift.NewTBinaryProcessorFunction(p, "testInsanity", func() thrift.TRequest { return &ThriftTestTestInsanityArgs{} }, &thriftTestProcessorTestInsanity{handler: handler}),
	)
	p.AddProcessor(
		"testMulti",
		thrift.NewTBinaryProcessorFunction(p, "testMulti", func() thrift.TRequest { return &ThriftTestTestMultiArgs{} }, &thriftTestProcessorTestMulti{handler: handler}),
	)
	p.AddProcessor(
		"testException",
		thrift.NewTBinaryProcessorFunction(p, "testException", func() thrift.TRequest { return &ThriftTestTestExceptionArgs{} }, &thriftTestProcessorTestException{handler: handler}),
	)
	p.AddProcessor(
		"testMultiException",
		thrift.NewTBinaryProcessorFunction(p, "testMultiException", func() thrift.TRequest { return &ThriftTestTestMultiExceptionArgs{} }, &thriftTestProcessorTestMultiException{handler: handler}),
	)
	p.AddProcessor(
		"testOneway",
		thrift.NewTUnaryProcessorFunction(p, "testOneway", func() thrift.TRequest { return &ThriftTestTestOnewayArgs{} }, &thriftTestProcessorTestOneway{handler: handler}),
	)
	return p
}

type thriftTestProcessorTestVoid struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestVoid) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	err2 := p.handler.TestVoid(ctx)
	result := &ThriftTestTestVoidResult{}
	if err2 != nil {
		return nil, err2
	}

	return result, nil
}

type thriftTestProcessorTestString struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestString) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestStringArgs)
	retval, err2 := p.handler.TestString(ctx, args.Thing)
	result := &ThriftTestTestStringResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

type thriftTestProcessorTestByte struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestByte) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestByteArgs)
	retval, err2 := p.handler.TestByte(ctx, args.Thing)
	result := &ThriftTestTestByteResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

type thriftTestProcessorTestI32 struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestI32) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestI32Args)
	retval, err2 := p.handler.TestI32(ctx, args.Thing)
	result := &ThriftTestTestI32Result{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

type thriftTestProcessorTestI64 struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestI64) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestI64Args)
	retval, err2 := p.handler.TestI64(ctx, args.Thing)
	result := &ThriftTestTestI64Result{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

type thriftTestProcessorTestDouble struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestDouble) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestDoubleArgs)
	retval, err2 := p.handler.TestDouble(ctx, args.Thing)
	result := &ThriftTestTestDoubleResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

type thriftTestProcessorTestBinary struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestBinary) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestBinaryArgs)
	retval, err2 := p.handler.TestBinary(ctx, args.Thing)
	result := &ThriftTestTestBinaryResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type thriftTestProcessorTestStruct struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestStruct) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestStructArgs)
	retval, err2 := p.handler.TestStruct(ctx, args.Thing)
	result := &ThriftTestTestStructResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type thriftTestProcessorTestNest struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestNest) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestNestArgs)
	retval, err2 := p.handler.TestNest(ctx, args.Thing)
	result := &ThriftTestTestNestResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type thriftTestProcessorTestMap struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestMap) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestMapArgs)
	retval, err2 := p.handler.TestMap(ctx, args.Thing)
	result := &ThriftTestTestMapResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type thriftTestProcessorTestStringMap struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestStringMap) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestStringMapArgs)
	retval, err2 := p.handler.TestStringMap(ctx, args.Thing)
	result := &ThriftTestTestStringMapResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type thriftTestProcessorTestSet struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestSet) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestSetArgs)
	retval, err2 := p.handler.TestSet(ctx, args.Thing)
	result := &ThriftTestTestSetResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type thriftTestProcessorTestList struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestList) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestListArgs)
	retval, err2 := p.handler.TestList(ctx, args.Thing)
	result := &ThriftTestTestListResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type thriftTestProcessorTestEnum struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestEnum) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestEnumArgs)
	retval, err2 := p.handler.TestEnum(ctx, args.Thing)
	result := &ThriftTestTestEnumResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

type thriftTestProcessorTestTypedef struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestTypedef) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestTypedefArgs)
	retval, err2 := p.handler.TestTypedef(ctx, args.Thing)
	result := &ThriftTestTestTypedefResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

type thriftTestProcessorTestMapMap struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestMapMap) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestMapMapArgs)
	retval, err2 := p.handler.TestMapMap(ctx, args.Hello)
	result := &ThriftTestTestMapMapResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type thriftTestProcessorTestInsanity struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestInsanity) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestInsanityArgs)
	retval, err2 := p.handler.TestInsanity(ctx, args.Argument)
	result := &ThriftTestTestInsanityResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type thriftTestProcessorTestMulti struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestMulti) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestMultiArgs)
	retval, err2 := p.handler.TestMulti(ctx, args.Arg0, args.Arg1, args.Arg2, args.Arg3, args.Arg4, args.Arg5)
	result := &ThriftTestTestMultiResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type thriftTestProcessorTestException struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestException) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestExceptionArgs)
	err2 := p.handler.TestException(ctx, args.Arg)
	result := &ThriftTestTestExceptionResult{}
	if err2 != nil {
		switch v := thrift.Cause(err2).(type) {
		case *Xception:
			result.Err1 = v
			return result, nil
		}
		return nil, err2
	}

	return result, nil
}

type thriftTestProcessorTestMultiException struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestMultiException) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ThriftTestTestMultiExceptionArgs)
	retval, err2 := p.handler.TestMultiException(ctx, args.Arg0, args.Arg1)
	result := &ThriftTestTestMultiExceptionResult{}
	if err2 != nil {
		switch v := thrift.Cause(err2).(type) {
		case *Xception:
			result.Err1 = v
			return result, nil
		case *Xception2:
			result.Err2 = v
			return result, nil
		}
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type thriftTestProcessorTestOneway struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestOneway) Handle(ctx thrift.Context, req thrift.TRequest) error {
	args := req.(*ThriftTestTestOnewayArgs)
	err2 := p.handler.TestOneway(ctx, args.SecondsToSleep)
	return err2
}

// HELPER FUNCTIONS AND STRUCTURES

type ThriftTestTestVoidArgs struct {
}

func NewThriftTestTestVoidArgs() *ThriftTestTestVoidArgs {
	return &ThriftTestTestVoidArgs{}
}

var thriftTestTestVoidArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testVoid_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{},
}

func (p *ThriftTestTestVoidArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestVoidArgsStructDefinition
}

func (p *ThriftTestTestVoidArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestVoidArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testVoid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestVoidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestVoidArgs({})",
	)
}

func (p *ThriftTestTestVoidResult) GetResult() interface{} {
	return nil

}

func (p *ThriftTestTestVoidResult) GetError() error {
	return nil

}

type ThriftTestTestVoidResult struct {
}

func NewThriftTestTestVoidResult() *ThriftTestTestVoidResult {
	return &ThriftTestTestVoidResult{}
}

var thriftTestTestVoidResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testVoid_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{},
}

func (p *ThriftTestTestVoidResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestVoidResultStructDefinition
}

func (p *ThriftTestTestVoidResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestVoidResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testVoid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestVoidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestVoidResult({})",
	)
}

// Attributes:
//  - Thing
type ThriftTestTestStringArgs struct {
	Thing string `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestStringArgs() *ThriftTestTestStringArgs {
	return &ThriftTestTestStringArgs{}
}

var thriftTestTestStringArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testString_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestStringArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestStringArgsStructDefinition
}

func (p *ThriftTestTestStringArgs) GetThing() string {
	return p.Thing
}

func (p *ThriftTestTestStringArgs) SetThing(v string) {
	p.Thing = v
}
func (p *ThriftTestTestStringArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestStringArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Thing = v
	}
	return nil
}

func (p *ThriftTestTestStringArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testString_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestStringArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteString(string(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestStringArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestStringArgs({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestStringResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestStringResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestStringResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestStringResult() *ThriftTestTestStringResult {
	return &ThriftTestTestStringResult{}
}

var thriftTestTestStringResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testString_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestStringResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestStringResultStructDefinition
}

var ThriftTestTestStringResult_Success_DEFAULT string

func (p *ThriftTestTestStringResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ThriftTestTestStringResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *ThriftTestTestStringResult) SetSuccess(v string) {
	p.Success = &v
}
func (p *ThriftTestTestStringResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestStringResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestStringResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftTestTestStringResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testString_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestStringResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestStringResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestStringResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Thing
type ThriftTestTestByteArgs struct {
	Thing int8 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestByteArgs() *ThriftTestTestByteArgs {
	return &ThriftTestTestByteArgs{}
}

var thriftTestTestByteArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testByte_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestByteArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestByteArgsStructDefinition
}

func (p *ThriftTestTestByteArgs) GetThing() int8 {
	return p.Thing
}

func (p *ThriftTestTestByteArgs) SetThing(v int8) {
	p.Thing = v
}
func (p *ThriftTestTestByteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestByteArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.Thing = temp
	}
	return nil
}

func (p *ThriftTestTestByteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testByte_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestByteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteByte(byte(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestByteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestByteArgs({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestByteResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestByteResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestByteResult struct {
	Success *int8 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestByteResult() *ThriftTestTestByteResult {
	return &ThriftTestTestByteResult{}
}

var thriftTestTestByteResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testByte_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestByteResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestByteResultStructDefinition
}

var ThriftTestTestByteResult_Success_DEFAULT int8

func (p *ThriftTestTestByteResult) GetSuccess() int8 {
	if !p.IsSetSuccess() {
		return ThriftTestTestByteResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *ThriftTestTestByteResult) SetSuccess(v int8) {
	p.Success = &v
}
func (p *ThriftTestTestByteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestByteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestByteResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := int8(v)
		p.Success = &temp
	}
	return nil
}

func (p *ThriftTestTestByteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testByte_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestByteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BYTE, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteByte(byte(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestByteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestByteResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Thing
type ThriftTestTestI32Args struct {
	Thing int32 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestI32Args() *ThriftTestTestI32Args {
	return &ThriftTestTestI32Args{}
}

var thriftTestTestI32ArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testI32_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestI32Args) StructDefinition() thrift.StructDefinition {
	return thriftTestTestI32ArgsStructDefinition
}

func (p *ThriftTestTestI32Args) GetThing() int32 {
	return p.Thing
}

func (p *ThriftTestTestI32Args) SetThing(v int32) {
	p.Thing = v
}
func (p *ThriftTestTestI32Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestI32Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Thing = v
	}
	return nil
}

func (p *ThriftTestTestI32Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testI32_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestI32Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestI32Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestI32Args({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestI32Result) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestI32Result) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestI32Result struct {
	Success *int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestI32Result() *ThriftTestTestI32Result {
	return &ThriftTestTestI32Result{}
}

var thriftTestTestI32ResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testI32_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestI32Result) StructDefinition() thrift.StructDefinition {
	return thriftTestTestI32ResultStructDefinition
}

var ThriftTestTestI32Result_Success_DEFAULT int32

func (p *ThriftTestTestI32Result) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ThriftTestTestI32Result_Success_DEFAULT
	}
	return *p.Success
}

func (p *ThriftTestTestI32Result) SetSuccess(v int32) {
	p.Success = &v
}
func (p *ThriftTestTestI32Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestI32Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestI32Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftTestTestI32Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testI32_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestI32Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestI32Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestI32Result({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Thing
type ThriftTestTestI64Args struct {
	Thing int64 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestI64Args() *ThriftTestTestI64Args {
	return &ThriftTestTestI64Args{}
}

var thriftTestTestI64ArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testI64_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestI64Args) StructDefinition() thrift.StructDefinition {
	return thriftTestTestI64ArgsStructDefinition
}

func (p *ThriftTestTestI64Args) GetThing() int64 {
	return p.Thing
}

func (p *ThriftTestTestI64Args) SetThing(v int64) {
	p.Thing = v
}
func (p *ThriftTestTestI64Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestI64Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Thing = v
	}
	return nil
}

func (p *ThriftTestTestI64Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testI64_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestI64Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestI64Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestI64Args({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestI64Result) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestI64Result) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestI64Result struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestI64Result() *ThriftTestTestI64Result {
	return &ThriftTestTestI64Result{}
}

var thriftTestTestI64ResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testI64_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestI64Result) StructDefinition() thrift.StructDefinition {
	return thriftTestTestI64ResultStructDefinition
}

var ThriftTestTestI64Result_Success_DEFAULT int64

func (p *ThriftTestTestI64Result) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return ThriftTestTestI64Result_Success_DEFAULT
	}
	return *p.Success
}

func (p *ThriftTestTestI64Result) SetSuccess(v int64) {
	p.Success = &v
}
func (p *ThriftTestTestI64Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestI64Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestI64Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftTestTestI64Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testI64_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestI64Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestI64Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestI64Result({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Thing
type ThriftTestTestDoubleArgs struct {
	Thing float64 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestDoubleArgs() *ThriftTestTestDoubleArgs {
	return &ThriftTestTestDoubleArgs{}
}

var thriftTestTestDoubleArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testDouble_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestDoubleArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestDoubleArgsStructDefinition
}

func (p *ThriftTestTestDoubleArgs) GetThing() float64 {
	return p.Thing
}

func (p *ThriftTestTestDoubleArgs) SetThing(v float64) {
	p.Thing = v
}
func (p *ThriftTestTestDoubleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestDoubleArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Thing = v
	}
	return nil
}

func (p *ThriftTestTestDoubleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testDouble_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestDoubleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestDoubleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestDoubleArgs({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestDoubleResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestDoubleResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestDoubleResult struct {
	Success *float64 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestDoubleResult() *ThriftTestTestDoubleResult {
	return &ThriftTestTestDoubleResult{}
}

var thriftTestTestDoubleResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testDouble_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestDoubleResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestDoubleResultStructDefinition
}

var ThriftTestTestDoubleResult_Success_DEFAULT float64

func (p *ThriftTestTestDoubleResult) GetSuccess() float64 {
	if !p.IsSetSuccess() {
		return ThriftTestTestDoubleResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *ThriftTestTestDoubleResult) SetSuccess(v float64) {
	p.Success = &v
}
func (p *ThriftTestTestDoubleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestDoubleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestDoubleResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftTestTestDoubleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testDouble_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestDoubleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.DOUBLE, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestDoubleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestDoubleResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Thing
type ThriftTestTestBinaryArgs struct {
	Thing []byte `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestBinaryArgs() *ThriftTestTestBinaryArgs {
	return &ThriftTestTestBinaryArgs{}
}

var thriftTestTestBinaryArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testBinary_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestBinaryArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestBinaryArgsStructDefinition
}

func (p *ThriftTestTestBinaryArgs) GetThing() []byte {
	return p.Thing
}

func (p *ThriftTestTestBinaryArgs) SetThing(v []byte) {
	p.Thing = v
}
func (p *ThriftTestTestBinaryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestBinaryArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Thing = v
	}
	return nil
}

func (p *ThriftTestTestBinaryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testBinary_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestBinaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteBinary(p.Thing); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestBinaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestBinaryArgs({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestBinaryResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestBinaryResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestBinaryResult struct {
	Success []byte `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestBinaryResult() *ThriftTestTestBinaryResult {
	return &ThriftTestTestBinaryResult{}
}

var thriftTestTestBinaryResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testBinary_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestBinaryResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestBinaryResultStructDefinition
}

var ThriftTestTestBinaryResult_Success_DEFAULT []byte

func (p *ThriftTestTestBinaryResult) GetSuccess() []byte {
	return p.Success
}

func (p *ThriftTestTestBinaryResult) SetSuccess(v []byte) {
	p.Success = v
}
func (p *ThriftTestTestBinaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestBinaryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestBinaryResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *ThriftTestTestBinaryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testBinary_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestBinaryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestBinaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestBinaryResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Thing
type ThriftTestTestStructArgs struct {
	Thing *Xtruct `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestStructArgs() *ThriftTestTestStructArgs {
	return &ThriftTestTestStructArgs{}
}

var thriftTestTestStructArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testStruct_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestStructArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestStructArgsStructDefinition
}

var ThriftTestTestStructArgs_Thing_DEFAULT *Xtruct

func (p *ThriftTestTestStructArgs) GetThing() *Xtruct {
	if !p.IsSetThing() {
		return ThriftTestTestStructArgs_Thing_DEFAULT
	}
	return p.Thing
}

func (p *ThriftTestTestStructArgs) SetThing(v *Xtruct) {
	p.Thing = v
}
func (p *ThriftTestTestStructArgs) IsSetThing() bool {
	return p.Thing != nil
}

func (p *ThriftTestTestStructArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestStructArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Thing = NewXtruct()
	if err := p.Thing.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Thing), err)
	}
	return nil
}

func (p *ThriftTestTestStructArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testStruct_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestStructArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := p.Thing.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Thing), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestStructArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestStructArgs({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestStructResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestStructResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestStructResult struct {
	Success *Xtruct `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestStructResult() *ThriftTestTestStructResult {
	return &ThriftTestTestStructResult{}
}

var thriftTestTestStructResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testStruct_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestStructResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestStructResultStructDefinition
}

var ThriftTestTestStructResult_Success_DEFAULT *Xtruct

func (p *ThriftTestTestStructResult) GetSuccess() *Xtruct {
	if !p.IsSetSuccess() {
		return ThriftTestTestStructResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ThriftTestTestStructResult) SetSuccess(v *Xtruct) {
	p.Success = v
}
func (p *ThriftTestTestStructResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestStructResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestStructResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewXtruct()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftTestTestStructResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testStruct_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestStructResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestStructResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestStructResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Thing
type ThriftTestTestNestArgs struct {
	Thing *Xtruct2 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestNestArgs() *ThriftTestTestNestArgs {
	return &ThriftTestTestNestArgs{}
}

var thriftTestTestNestArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testNest_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestNestArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestNestArgsStructDefinition
}

var ThriftTestTestNestArgs_Thing_DEFAULT *Xtruct2

func (p *ThriftTestTestNestArgs) GetThing() *Xtruct2 {
	if !p.IsSetThing() {
		return ThriftTestTestNestArgs_Thing_DEFAULT
	}
	return p.Thing
}

func (p *ThriftTestTestNestArgs) SetThing(v *Xtruct2) {
	p.Thing = v
}
func (p *ThriftTestTestNestArgs) IsSetThing() bool {
	return p.Thing != nil
}

func (p *ThriftTestTestNestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestNestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Thing = NewXtruct2()
	if err := p.Thing.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Thing), err)
	}
	return nil
}

func (p *ThriftTestTestNestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testNest_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestNestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := p.Thing.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Thing), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestNestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestNestArgs({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestNestResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestNestResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestNestResult struct {
	Success *Xtruct2 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestNestResult() *ThriftTestTestNestResult {
	return &ThriftTestTestNestResult{}
}

var thriftTestTestNestResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testNest_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestNestResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestNestResultStructDefinition
}

var ThriftTestTestNestResult_Success_DEFAULT *Xtruct2

func (p *ThriftTestTestNestResult) GetSuccess() *Xtruct2 {
	if !p.IsSetSuccess() {
		return ThriftTestTestNestResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ThriftTestTestNestResult) SetSuccess(v *Xtruct2) {
	p.Success = v
}
func (p *ThriftTestTestNestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestNestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestNestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewXtruct2()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftTestTestNestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testNest_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestNestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestNestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestNestResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Thing
type ThriftTestTestMapArgs struct {
	Thing map[int32]int32 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestMapArgs() *ThriftTestTestMapArgs {
	return &ThriftTestTestMapArgs{}
}

var thriftTestTestMapArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testMap_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestMapArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestMapArgsStructDefinition
}

func (p *ThriftTestTestMapArgs) GetThing() map[int32]int32 {
	return p.Thing
}

func (p *ThriftTestTestMapArgs) SetThing(v map[int32]int32) {
	p.Thing = v
}
func (p *ThriftTestTestMapArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestMapArgs) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]int32, size)
	p.Thing = tMap
	for i := 0; i < size; i++ {
		var _key32 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key32 = v
		}
		var _val33 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val33 = v
		}
		p.Thing[_key32] = _val33
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ThriftTestTestMapArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMap_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.Thing)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Thing {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestMapArgs({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestMapResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestMapResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestMapResult struct {
	Success map[int32]int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestMapResult() *ThriftTestTestMapResult {
	return &ThriftTestTestMapResult{}
}

var thriftTestTestMapResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testMap_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestMapResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestMapResultStructDefinition
}

var ThriftTestTestMapResult_Success_DEFAULT map[int32]int32

func (p *ThriftTestTestMapResult) GetSuccess() map[int32]int32 {
	return p.Success
}

func (p *ThriftTestTestMapResult) SetSuccess(v map[int32]int32) {
	p.Success = v
}
func (p *ThriftTestTestMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestMapResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestMapResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]int32, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key34 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key34 = v
		}
		var _val35 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val35 = v
		}
		p.Success[_key34] = _val35
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ThriftTestTestMapResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMap_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestMapResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Thing
type ThriftTestTestStringMapArgs struct {
	Thing map[string]string `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestStringMapArgs() *ThriftTestTestStringMapArgs {
	return &ThriftTestTestStringMapArgs{}
}

var thriftTestTestStringMapArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testStringMap_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestStringMapArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestStringMapArgsStructDefinition
}

func (p *ThriftTestTestStringMapArgs) GetThing() map[string]string {
	return p.Thing
}

func (p *ThriftTestTestStringMapArgs) SetThing(v map[string]string) {
	p.Thing = v
}
func (p *ThriftTestTestStringMapArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestStringMapArgs) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Thing = tMap
	for i := 0; i < size; i++ {
		var _key36 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key36 = v
		}
		var _val37 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val37 = v
		}
		p.Thing[_key36] = _val37
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ThriftTestTestStringMapArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testStringMap_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestStringMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Thing)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Thing {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestStringMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestStringMapArgs({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestStringMapResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestStringMapResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestStringMapResult struct {
	Success map[string]string `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestStringMapResult() *ThriftTestTestStringMapResult {
	return &ThriftTestTestStringMapResult{}
}

var thriftTestTestStringMapResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testStringMap_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestStringMapResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestStringMapResultStructDefinition
}

var ThriftTestTestStringMapResult_Success_DEFAULT map[string]string

func (p *ThriftTestTestStringMapResult) GetSuccess() map[string]string {
	return p.Success
}

func (p *ThriftTestTestStringMapResult) SetSuccess(v map[string]string) {
	p.Success = v
}
func (p *ThriftTestTestStringMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestStringMapResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestStringMapResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key38 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key38 = v
		}
		var _val39 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val39 = v
		}
		p.Success[_key38] = _val39
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ThriftTestTestStringMapResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testStringMap_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestStringMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestStringMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestStringMapResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Thing
type ThriftTestTestSetArgs struct {
	Thing map[int32]bool `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestSetArgs() *ThriftTestTestSetArgs {
	return &ThriftTestTestSetArgs{}
}

var thriftTestTestSetArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testSet_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestSetArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestSetArgsStructDefinition
}

func (p *ThriftTestTestSetArgs) GetThing() map[int32]bool {
	return p.Thing
}

func (p *ThriftTestTestSetArgs) SetThing(v map[int32]bool) {
	p.Thing = v
}
func (p *ThriftTestTestSetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestSetArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[int32]bool, size)
	p.Thing = tSet
	for i := 0; i < size; i++ {
		var _elem40 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem40 = v
		}
		p.Thing[_elem40] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *ThriftTestTestSetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testSet_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.SET, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.Thing)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Thing {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestSetArgs({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestSetResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestSetResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestSetResult struct {
	Success map[int32]bool `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestSetResult() *ThriftTestTestSetResult {
	return &ThriftTestTestSetResult{}
}

var thriftTestTestSetResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testSet_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestSetResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestSetResultStructDefinition
}

var ThriftTestTestSetResult_Success_DEFAULT map[int32]bool

func (p *ThriftTestTestSetResult) GetSuccess() map[int32]bool {
	return p.Success
}

func (p *ThriftTestTestSetResult) SetSuccess(v map[int32]bool) {
	p.Success = v
}
func (p *ThriftTestTestSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestSetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestSetResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[int32]bool, size)
	p.Success = tSet
	for i := 0; i < size; i++ {
		var _elem41 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem41 = v
		}
		p.Success[_elem41] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *ThriftTestTestSetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testSet_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.I32, len(p.Success)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Success {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestSetResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Thing
type ThriftTestTestListArgs struct {
	Thing []int32 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestListArgs() *ThriftTestTestListArgs {
	return &ThriftTestTestListArgs{}
}

var thriftTestTestListArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testList_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestListArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestListArgsStructDefinition
}

func (p *ThriftTestTestListArgs) GetThing() []int32 {
	return p.Thing
}

func (p *ThriftTestTestListArgs) SetThing(v []int32) {
	p.Thing = v
}
func (p *ThriftTestTestListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestListArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.Thing = tSlice
	for i := 0; i < size; i++ {
		var _elem42 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem42 = v
		}
		p.Thing = append(p.Thing, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftTestTestListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Thing)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Thing {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestListArgs({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestListResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestListResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestListResult struct {
	Success []int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestListResult() *ThriftTestTestListResult {
	return &ThriftTestTestListResult{}
}

var thriftTestTestListResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testList_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestListResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestListResultStructDefinition
}

var ThriftTestTestListResult_Success_DEFAULT []int32

func (p *ThriftTestTestListResult) GetSuccess() []int32 {
	return p.Success
}

func (p *ThriftTestTestListResult) SetSuccess(v []int32) {
	p.Success = v
}
func (p *ThriftTestTestListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem43 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem43 = v
		}
		p.Success = append(p.Success, _elem43)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftTestTestListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestListResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Thing
type ThriftTestTestEnumArgs struct {
	Thing Numberz `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestEnumArgs() *ThriftTestTestEnumArgs {
	return &ThriftTestTestEnumArgs{}
}

var thriftTestTestEnumArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testEnum_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestEnumArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestEnumArgsStructDefinition
}

func (p *ThriftTestTestEnumArgs) GetThing() Numberz {
	return p.Thing
}

func (p *ThriftTestTestEnumArgs) SetThing(v Numberz) {
	p.Thing = v
}
func (p *ThriftTestTestEnumArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestEnumArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Numberz(v)
		p.Thing = temp
	}
	return nil
}

func (p *ThriftTestTestEnumArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testEnum_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestEnumArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestEnumArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestEnumArgs({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestEnumResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestEnumResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestEnumResult struct {
	Success *Numberz `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestEnumResult() *ThriftTestTestEnumResult {
	return &ThriftTestTestEnumResult{}
}

var thriftTestTestEnumResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testEnum_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestEnumResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestEnumResultStructDefinition
}

var ThriftTestTestEnumResult_Success_DEFAULT Numberz

func (p *ThriftTestTestEnumResult) GetSuccess() Numberz {
	if !p.IsSetSuccess() {
		return ThriftTestTestEnumResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *ThriftTestTestEnumResult) SetSuccess(v Numberz) {
	p.Success = &v
}
func (p *ThriftTestTestEnumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestEnumResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestEnumResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := Numberz(v)
		p.Success = &temp
	}
	return nil
}

func (p *ThriftTestTestEnumResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testEnum_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestEnumResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestEnumResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestEnumResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Thing
type ThriftTestTestTypedefArgs struct {
	Thing UserId `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestTypedefArgs() *ThriftTestTestTypedefArgs {
	return &ThriftTestTestTypedefArgs{}
}

var thriftTestTestTypedefArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testTypedef_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestTypedefArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestTypedefArgsStructDefinition
}

func (p *ThriftTestTestTypedefArgs) GetThing() UserId {
	return p.Thing
}

func (p *ThriftTestTestTypedefArgs) SetThing(v UserId) {
	p.Thing = v
}
func (p *ThriftTestTestTypedefArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestTypedefArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := UserId(v)
		p.Thing = temp
	}
	return nil
}

func (p *ThriftTestTestTypedefArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testTypedef_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestTypedefArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *ThriftTestTestTypedefArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestTypedefArgs({thing: %v})",
		p.GetThing(),
	)
}

func (p *ThriftTestTestTypedefResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestTypedefResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestTypedefResult struct {
	Success *UserId `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestTypedefResult() *ThriftTestTestTypedefResult {
	return &ThriftTestTestTypedefResult{}
}

var thriftTestTestTypedefResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testTypedef_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestTypedefResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestTypedefResultStructDefinition
}

var ThriftTestTestTypedefResult_Success_DEFAULT UserId

func (p *ThriftTestTestTypedefResult) GetSuccess() UserId {
	if !p.IsSetSuccess() {
		return ThriftTestTestTypedefResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *ThriftTestTestTypedefResult) SetSuccess(v UserId) {
	p.Success = &v
}
func (p *ThriftTestTestTypedefResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestTypedefResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestTypedefResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := UserId(v)
		p.Success = &temp
	}
	return nil
}

func (p *ThriftTestTestTypedefResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testTypedef_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestTypedefResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestTypedefResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestTypedefResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Hello
type ThriftTestTestMapMapArgs struct {
	Hello int32 `thrift:"hello,1" json:"hello"`
}

func NewThriftTestTestMapMapArgs() *ThriftTestTestMapMapArgs {
	return &ThriftTestTestMapMapArgs{}
}

var thriftTestTestMapMapArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testMapMap_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "hello",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestMapMapArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestMapMapArgsStructDefinition
}

func (p *ThriftTestTestMapMapArgs) GetHello() int32 {
	return p.Hello
}

func (p *ThriftTestTestMapMapArgs) SetHello(v int32) {
	p.Hello = v
}
func (p *ThriftTestTestMapMapArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestMapMapArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hello = v
	}
	return nil
}

func (p *ThriftTestTestMapMapArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMapMap_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestMapMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hello", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hello: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Hello)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hello (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hello: ", p), err)
	}
	return err
}

func (p *ThriftTestTestMapMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestMapMapArgs({hello: %v})",
		p.GetHello(),
	)
}

func (p *ThriftTestTestMapMapResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestMapMapResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestMapMapResult struct {
	Success map[int32]map[int32]int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestMapMapResult() *ThriftTestTestMapMapResult {
	return &ThriftTestTestMapMapResult{}
}

var thriftTestTestMapMapResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testMapMap_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestMapMapResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestMapMapResultStructDefinition
}

var ThriftTestTestMapMapResult_Success_DEFAULT map[int32]map[int32]int32

func (p *ThriftTestTestMapMapResult) GetSuccess() map[int32]map[int32]int32 {
	return p.Success
}

func (p *ThriftTestTestMapMapResult) SetSuccess(v map[int32]map[int32]int32) {
	p.Success = v
}
func (p *ThriftTestTestMapMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestMapMapResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestMapMapResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]map[int32]int32, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key44 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key44 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[int32]int32, size)
		_val45 := tMap
		for i := 0; i < size; i++ {
			var _key46 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key46 = v
			}
			var _val47 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val47 = v
			}
			_val45[_key46] = _val47
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.Success[_key44] = _val45
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ThriftTestTestMapMapResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMapMap_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestMapMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteI32(int32(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestMapMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestMapMapResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Argument
type ThriftTestTestInsanityArgs struct {
	Argument *Insanity `thrift:"argument,1" json:"argument"`
}

func NewThriftTestTestInsanityArgs() *ThriftTestTestInsanityArgs {
	return &ThriftTestTestInsanityArgs{}
}

var thriftTestTestInsanityArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testInsanity_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "argument",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestInsanityArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestInsanityArgsStructDefinition
}

var ThriftTestTestInsanityArgs_Argument_DEFAULT *Insanity

func (p *ThriftTestTestInsanityArgs) GetArgument() *Insanity {
	if !p.IsSetArgument() {
		return ThriftTestTestInsanityArgs_Argument_DEFAULT
	}
	return p.Argument
}

func (p *ThriftTestTestInsanityArgs) SetArgument(v *Insanity) {
	p.Argument = v
}
func (p *ThriftTestTestInsanityArgs) IsSetArgument() bool {
	return p.Argument != nil
}

func (p *ThriftTestTestInsanityArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestInsanityArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Argument = NewInsanity()
	if err := p.Argument.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Argument), err)
	}
	return nil
}

func (p *ThriftTestTestInsanityArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testInsanity_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestInsanityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argument", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:argument: ", p), err)
	}
	if err := p.Argument.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Argument), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:argument: ", p), err)
	}
	return err
}

func (p *ThriftTestTestInsanityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestInsanityArgs({argument: %v})",
		p.GetArgument(),
	)
}

func (p *ThriftTestTestInsanityResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestInsanityResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestInsanityResult struct {
	Success map[UserId]map[Numberz]*Insanity `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestInsanityResult() *ThriftTestTestInsanityResult {
	return &ThriftTestTestInsanityResult{}
}

var thriftTestTestInsanityResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testInsanity_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestInsanityResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestInsanityResultStructDefinition
}

var ThriftTestTestInsanityResult_Success_DEFAULT map[UserId]map[Numberz]*Insanity

func (p *ThriftTestTestInsanityResult) GetSuccess() map[UserId]map[Numberz]*Insanity {
	return p.Success
}

func (p *ThriftTestTestInsanityResult) SetSuccess(v map[UserId]map[Numberz]*Insanity) {
	p.Success = v
}
func (p *ThriftTestTestInsanityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestInsanityResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestInsanityResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[UserId]map[Numberz]*Insanity, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key48 UserId
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := UserId(v)
			_key48 = temp
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[Numberz]*Insanity, size)
		_val49 := tMap
		for i := 0; i < size; i++ {
			var _key50 Numberz
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				temp := Numberz(v)
				_key50 = temp
			}
			_val51 := NewInsanity()
			if err := _val51.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val51), err)
			}
			_val49[_key50] = _val51
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.Success[_key48] = _val49
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ThriftTestTestInsanityResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testInsanity_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestInsanityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.MAP, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteI64(int64(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestInsanityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestInsanityResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Arg0
//  - Arg1
//  - Arg2
//  - Arg3
//  - Arg4
//  - Arg5
type ThriftTestTestMultiArgs struct {
	Arg0 int8             `thrift:"arg0,1" json:"arg0"`
	Arg1 int32            `thrift:"arg1,2" json:"arg1"`
	Arg2 int64            `thrift:"arg2,3" json:"arg2"`
	Arg3 map[int16]string `thrift:"arg3,4" json:"arg3"`
	Arg4 Numberz          `thrift:"arg4,5" json:"arg4"`
	Arg5 UserId           `thrift:"arg5,6" json:"arg5"`
}

func NewThriftTestTestMultiArgs() *ThriftTestTestMultiArgs {
	return &ThriftTestTestMultiArgs{}
}

var thriftTestTestMultiArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testMulti_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg0",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg1",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg2",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg3",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg4",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg5",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestMultiArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestMultiArgsStructDefinition
}

func (p *ThriftTestTestMultiArgs) GetArg0() int8 {
	return p.Arg0
}

func (p *ThriftTestTestMultiArgs) SetArg0(v int8) {
	p.Arg0 = v
}

func (p *ThriftTestTestMultiArgs) GetArg1() int32 {
	return p.Arg1
}

func (p *ThriftTestTestMultiArgs) SetArg1(v int32) {
	p.Arg1 = v
}

func (p *ThriftTestTestMultiArgs) GetArg2() int64 {
	return p.Arg2
}

func (p *ThriftTestTestMultiArgs) SetArg2(v int64) {
	p.Arg2 = v
}

func (p *ThriftTestTestMultiArgs) GetArg3() map[int16]string {
	return p.Arg3
}

func (p *ThriftTestTestMultiArgs) SetArg3(v map[int16]string) {
	p.Arg3 = v
}

func (p *ThriftTestTestMultiArgs) GetArg4() Numberz {
	return p.Arg4
}

func (p *ThriftTestTestMultiArgs) SetArg4(v Numberz) {
	p.Arg4 = v
}

func (p *ThriftTestTestMultiArgs) GetArg5() UserId {
	return p.Arg5
}

func (p *ThriftTestTestMultiArgs) SetArg5(v UserId) {
	p.Arg5 = v
}
func (p *ThriftTestTestMultiArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.Arg0 = temp
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Arg1 = v
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Arg2 = v
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int16]string, size)
	p.Arg3 = tMap
	for i := 0; i < size; i++ {
		var _key52 int16
		if v, err := iprot.ReadI16(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key52 = v
		}
		var _val53 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val53 = v
		}
		p.Arg3[_key52] = _val53
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := Numberz(v)
		p.Arg4 = temp
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := UserId(v)
		p.Arg5 = temp
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMulti_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg0", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg0: ", p), err)
	}
	if err := oprot.WriteByte(byte(p.Arg0)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg0 (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg0: ", p), err)
	}
	return err
}

func (p *ThriftTestTestMultiArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg1", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:arg1: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Arg1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg1 (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:arg1: ", p), err)
	}
	return err
}

func (p *ThriftTestTestMultiArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg2", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:arg2: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Arg2)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg2 (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:arg2: ", p), err)
	}
	return err
}

func (p *ThriftTestTestMultiArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg3", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:arg3: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I16, thrift.STRING, len(p.Arg3)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Arg3 {
		if err := oprot.WriteI16(int16(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:arg3: ", p), err)
	}
	return err
}

func (p *ThriftTestTestMultiArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg4", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:arg4: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Arg4)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg4 (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:arg4: ", p), err)
	}
	return err
}

func (p *ThriftTestTestMultiArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg5", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:arg5: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Arg5)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg5 (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:arg5: ", p), err)
	}
	return err
}

func (p *ThriftTestTestMultiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestMultiArgs({arg0: %v, arg1: %v, arg2: %v, arg3: %v, arg4: %v, arg5: %v})",
		p.GetArg0(),
		p.GetArg1(),
		p.GetArg2(),
		p.GetArg3(),
		p.GetArg4(),
		p.GetArg5(),
	)
}

func (p *ThriftTestTestMultiResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestMultiResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ThriftTestTestMultiResult struct {
	Success *Xtruct `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestMultiResult() *ThriftTestTestMultiResult {
	return &ThriftTestTestMultiResult{}
}

var thriftTestTestMultiResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testMulti_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestMultiResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestMultiResultStructDefinition
}

var ThriftTestTestMultiResult_Success_DEFAULT *Xtruct

func (p *ThriftTestTestMultiResult) GetSuccess() *Xtruct {
	if !p.IsSetSuccess() {
		return ThriftTestTestMultiResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ThriftTestTestMultiResult) SetSuccess(v *Xtruct) {
	p.Success = v
}
func (p *ThriftTestTestMultiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestMultiResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestMultiResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewXtruct()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftTestTestMultiResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMulti_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestMultiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestMultiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestMultiResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Arg
type ThriftTestTestExceptionArgs struct {
	Arg string `thrift:"arg,1" json:"arg"`
}

func NewThriftTestTestExceptionArgs() *ThriftTestTestExceptionArgs {
	return &ThriftTestTestExceptionArgs{}
}

var thriftTestTestExceptionArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testException_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestExceptionArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestExceptionArgsStructDefinition
}

func (p *ThriftTestTestExceptionArgs) GetArg() string {
	return p.Arg
}

func (p *ThriftTestTestExceptionArgs) SetArg(v string) {
	p.Arg = v
}
func (p *ThriftTestTestExceptionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestExceptionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Arg = v
	}
	return nil
}

func (p *ThriftTestTestExceptionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testException_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestExceptionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Arg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err)
	}
	return err
}

func (p *ThriftTestTestExceptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestExceptionArgs({arg: %v})",
		p.GetArg(),
	)
}

func (p *ThriftTestTestExceptionResult) GetResult() interface{} {
	return nil

}

func (p *ThriftTestTestExceptionResult) GetError() error {
	if p.Err1 != nil {
		return p.Err1
	}

	return nil

}

// Attributes:
//  - Err1
type ThriftTestTestExceptionResult struct {
	Err1 *Xception `thrift:"err1,1" json:"err1,omitempty"`
}

func NewThriftTestTestExceptionResult() *ThriftTestTestExceptionResult {
	return &ThriftTestTestExceptionResult{}
}

var thriftTestTestExceptionResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testException_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "err1",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestExceptionResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestExceptionResultStructDefinition
}

var ThriftTestTestExceptionResult_Err1_DEFAULT *Xception

func (p *ThriftTestTestExceptionResult) GetErr1() *Xception {
	if !p.IsSetErr1() {
		return ThriftTestTestExceptionResult_Err1_DEFAULT
	}
	return p.Err1
}

func (p *ThriftTestTestExceptionResult) SetErr1(v *Xception) {
	p.Err1 = v
}
func (p *ThriftTestTestExceptionResult) IsSetErr1() bool {
	return p.Err1 != nil
}

func (p *ThriftTestTestExceptionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestExceptionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err1 = NewXception()
	if err := p.Err1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err1), err)
	}
	return nil
}

func (p *ThriftTestTestExceptionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testException_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestExceptionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr1() {
		if err := oprot.WriteFieldBegin("err1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err1: ", p), err)
		}
		if err := p.Err1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err1: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestExceptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestExceptionResult({err1: %v})",
		p.GetErr1(),
	)
}

// Attributes:
//  - Arg0
//  - Arg1
type ThriftTestTestMultiExceptionArgs struct {
	Arg0 string `thrift:"arg0,1" json:"arg0"`
	Arg1 string `thrift:"arg1,2" json:"arg1"`
}

func NewThriftTestTestMultiExceptionArgs() *ThriftTestTestMultiExceptionArgs {
	return &ThriftTestTestMultiExceptionArgs{}
}

var thriftTestTestMultiExceptionArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testMultiException_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg0",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg1",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestMultiExceptionArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestMultiExceptionArgsStructDefinition
}

func (p *ThriftTestTestMultiExceptionArgs) GetArg0() string {
	return p.Arg0
}

func (p *ThriftTestTestMultiExceptionArgs) SetArg0(v string) {
	p.Arg0 = v
}

func (p *ThriftTestTestMultiExceptionArgs) GetArg1() string {
	return p.Arg1
}

func (p *ThriftTestTestMultiExceptionArgs) SetArg1(v string) {
	p.Arg1 = v
}
func (p *ThriftTestTestMultiExceptionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Arg0 = v
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Arg1 = v
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMultiException_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg0", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg0: ", p), err)
	}
	if err := oprot.WriteString(string(p.Arg0)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg0 (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg0: ", p), err)
	}
	return err
}

func (p *ThriftTestTestMultiExceptionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg1", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:arg1: ", p), err)
	}
	if err := oprot.WriteString(string(p.Arg1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg1 (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:arg1: ", p), err)
	}
	return err
}

func (p *ThriftTestTestMultiExceptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestMultiExceptionArgs({arg0: %v, arg1: %v})",
		p.GetArg0(),
		p.GetArg1(),
	)
}

func (p *ThriftTestTestMultiExceptionResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ThriftTestTestMultiExceptionResult) GetError() error {
	if p.Err1 != nil {
		return p.Err1
	}

	if p.Err2 != nil {
		return p.Err2
	}

	return nil

}

// Attributes:
//  - Success
//  - Err1
//  - Err2
type ThriftTestTestMultiExceptionResult struct {
	Success *Xtruct    `thrift:"success,0" json:"success,omitempty"`
	Err1    *Xception  `thrift:"err1,1" json:"err1,omitempty"`
	Err2    *Xception2 `thrift:"err2,2" json:"err2,omitempty"`
}

func NewThriftTestTestMultiExceptionResult() *ThriftTestTestMultiExceptionResult {
	return &ThriftTestTestMultiExceptionResult{}
}

var thriftTestTestMultiExceptionResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testMultiException_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "err1",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "err2",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestMultiExceptionResult) StructDefinition() thrift.StructDefinition {
	return thriftTestTestMultiExceptionResultStructDefinition
}

var ThriftTestTestMultiExceptionResult_Success_DEFAULT *Xtruct

func (p *ThriftTestTestMultiExceptionResult) GetSuccess() *Xtruct {
	if !p.IsSetSuccess() {
		return ThriftTestTestMultiExceptionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ThriftTestTestMultiExceptionResult) SetSuccess(v *Xtruct) {
	p.Success = v
}

var ThriftTestTestMultiExceptionResult_Err1_DEFAULT *Xception

func (p *ThriftTestTestMultiExceptionResult) GetErr1() *Xception {
	if !p.IsSetErr1() {
		return ThriftTestTestMultiExceptionResult_Err1_DEFAULT
	}
	return p.Err1
}

func (p *ThriftTestTestMultiExceptionResult) SetErr1(v *Xception) {
	p.Err1 = v
}

var ThriftTestTestMultiExceptionResult_Err2_DEFAULT *Xception2

func (p *ThriftTestTestMultiExceptionResult) GetErr2() *Xception2 {
	if !p.IsSetErr2() {
		return ThriftTestTestMultiExceptionResult_Err2_DEFAULT
	}
	return p.Err2
}

func (p *ThriftTestTestMultiExceptionResult) SetErr2(v *Xception2) {
	p.Err2 = v
}
func (p *ThriftTestTestMultiExceptionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestMultiExceptionResult) IsSetErr1() bool {
	return p.Err1 != nil
}

func (p *ThriftTestTestMultiExceptionResult) IsSetErr2() bool {
	return p.Err2 != nil
}

func (p *ThriftTestTestMultiExceptionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewXtruct()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err1 = NewXception()
	if err := p.Err1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err1), err)
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionResult) ReadField2(iprot thrift.TProtocol) error {
	p.Err2 = NewXception2()
	if err := p.Err2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err2), err)
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMultiException_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestMultiExceptionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr1() {
		if err := oprot.WriteFieldBegin("err1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err1: ", p), err)
		}
		if err := p.Err1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err1: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestMultiExceptionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr2() {
		if err := oprot.WriteFieldBegin("err2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:err2: ", p), err)
		}
		if err := p.Err2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:err2: ", p), err)
		}
	}
	return err
}

func (p *ThriftTestTestMultiExceptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestMultiExceptionResult({success: %v, err1: %v, err2: %v})",
		p.GetSuccess(),
		p.GetErr1(),
		p.GetErr2(),
	)
}

// Attributes:
//  - SecondsToSleep
type ThriftTestTestOnewayArgs struct {
	SecondsToSleep int32 `thrift:"secondsToSleep,1" json:"secondsToSleep"`
}

func NewThriftTestTestOnewayArgs() *ThriftTestTestOnewayArgs {
	return &ThriftTestTestOnewayArgs{}
}

var thriftTestTestOnewayArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "testOneway_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "secondsToSleep",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ThriftTestTestOnewayArgs) StructDefinition() thrift.StructDefinition {
	return thriftTestTestOnewayArgsStructDefinition
}

func (p *ThriftTestTestOnewayArgs) GetSecondsToSleep() int32 {
	return p.SecondsToSleep
}

func (p *ThriftTestTestOnewayArgs) SetSecondsToSleep(v int32) {
	p.SecondsToSleep = v
}
func (p *ThriftTestTestOnewayArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftTestTestOnewayArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SecondsToSleep = v
	}
	return nil
}

func (p *ThriftTestTestOnewayArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testOneway_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftTestTestOnewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("secondsToSleep", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:secondsToSleep: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SecondsToSleep)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.secondsToSleep (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:secondsToSleep: ", p), err)
	}
	return err
}

func (p *ThriftTestTestOnewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ThriftTestTestOnewayArgs({secondsToSleep: %v})",
		p.GetSecondsToSleep(),
	)
}
