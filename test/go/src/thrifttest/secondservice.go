// Autogenerated by Thrift Compiler ()
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrifttest

import (
	"bytes"
	"fmt"
	"github.com/upfluence/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type SecondService interface {
	BlahBlah(ctx thrift.Context) (err error)
	// Prints 'testString("%s")' with thing as '%s'
	// @param string thing - the string to print
	// @return string - returns the string 'thing'
	//
	// Parameters:
	//  - Thing
	SecondtestString(ctx thrift.Context, thing string) (res string, err error)
}

var secondServiceServiceDefinition = thrift.ServiceDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "SecondService",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Functions: []thrift.FunctionDefinition{
		{
			Result: &secondServiceBlahBlahResultStructDefinition,
			Args:   secondServiceBlahBlahArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "blahBlah",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &secondServiceSecondtestStringResultStructDefinition,
			Args:   secondServiceSecondtestStringArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "secondtestString",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

type SecondServiceClient struct {
	thrift.TClient
}

func NewSecondServiceClientFactoryProvider(p thrift.TClientProvider) (*SecondServiceClient, error) {
	cl, err := p.Build("thrift.test", "SecondService")

	if err != nil {
		return nil, err
	}

	return NewSecondServiceClient(cl), nil
}

func NewSecondServiceClient(cl thrift.TClient) *SecondServiceClient {
	return &SecondServiceClient{TClient: cl}
}

func (p *SecondServiceClient) BlahBlah(ctx thrift.Context) (err error) {
	args := SecondServiceBlahBlahArgs{}
	result := SecondServiceBlahBlahResult{}
	if err = p.CallBinary(ctx, "blahBlah", &args, &result); err != nil {
		return err
	}

	return nil
}

// Prints 'testString("%s")' with thing as '%s'
// @param string thing - the string to print
// @return string - returns the string 'thing'
//
// Parameters:
//  - Thing
func (p *SecondServiceClient) SecondtestString(ctx thrift.Context, thing string) (res string, err error) {
	args := SecondServiceSecondtestStringArgs{
		Thing: thing,
	}
	result := SecondServiceSecondtestStringResult{}
	if err = p.CallBinary(ctx, "secondtestString", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "secondtestString failed: unknown result")
	}

	return result.GetSuccess(), nil
}

func NewSecondServiceProcessorProvider(handler SecondService, provider thrift.TProcessorProvider) (thrift.TProcessor, error) {
	p, err := provider.Build("thrift.test", "SecondService")
	if err != nil {
		return nil, err
	}

	return NewSecondServiceProcessorFactory(handler, p), nil
}

func NewSecondServiceProcessor(handler SecondService, middlewares []thrift.TMiddleware) thrift.TProcessor {
	p := thrift.NewTStandardProcessor(middlewares)
	return NewSecondServiceProcessorFactory(handler, p)
}

func NewSecondServiceProcessorFactory(handler SecondService, p thrift.TProcessor) thrift.TProcessor {
	p.AddProcessor(
		"blahBlah",
		thrift.NewTBinaryProcessorFunction(p, "blahBlah", func() thrift.TRequest { return &SecondServiceBlahBlahArgs{} }, &secondServiceProcessorBlahBlah{handler: handler}),
	)
	p.AddProcessor(
		"secondtestString",
		thrift.NewTBinaryProcessorFunction(p, "secondtestString", func() thrift.TRequest { return &SecondServiceSecondtestStringArgs{} }, &secondServiceProcessorSecondtestString{handler: handler}),
	)
	return p
}

type secondServiceProcessorBlahBlah struct {
	handler SecondService
}

func (p *secondServiceProcessorBlahBlah) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	err2 := p.handler.BlahBlah(ctx)
	result := &SecondServiceBlahBlahResult{}
	if err2 != nil {
		return nil, err2
	}

	return result, nil
}

type secondServiceProcessorSecondtestString struct {
	handler SecondService
}

func (p *secondServiceProcessorSecondtestString) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*SecondServiceSecondtestStringArgs)
	retval, err2 := p.handler.SecondtestString(ctx, args.Thing)
	result := &SecondServiceSecondtestStringResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

// HELPER FUNCTIONS AND STRUCTURES

type SecondServiceBlahBlahArgs struct {
}

func NewSecondServiceBlahBlahArgs() *SecondServiceBlahBlahArgs {
	return &SecondServiceBlahBlahArgs{}
}

var secondServiceBlahBlahArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "blahBlah_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{},
}

func (p *SecondServiceBlahBlahArgs) StructDefinition() thrift.StructDefinition {
	return secondServiceBlahBlahArgsStructDefinition
}

func (p *SecondServiceBlahBlahArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SecondServiceBlahBlahArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blahBlah_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SecondServiceBlahBlahArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"SecondServiceBlahBlahArgs({})",
	)
}

func (p *SecondServiceBlahBlahResult) GetResult() interface{} {
	return nil

}

func (p *SecondServiceBlahBlahResult) GetError() error {
	return nil

}

type SecondServiceBlahBlahResult struct {
}

func NewSecondServiceBlahBlahResult() *SecondServiceBlahBlahResult {
	return &SecondServiceBlahBlahResult{}
}

var secondServiceBlahBlahResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "blahBlah_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{},
}

func (p *SecondServiceBlahBlahResult) StructDefinition() thrift.StructDefinition {
	return secondServiceBlahBlahResultStructDefinition
}

func (p *SecondServiceBlahBlahResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SecondServiceBlahBlahResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blahBlah_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SecondServiceBlahBlahResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"SecondServiceBlahBlahResult({})",
	)
}

// Attributes:
//  - Thing
type SecondServiceSecondtestStringArgs struct {
	Thing string `thrift:"thing,1" json:"thing"`
}

func NewSecondServiceSecondtestStringArgs() *SecondServiceSecondtestStringArgs {
	return &SecondServiceSecondtestStringArgs{}
}

var secondServiceSecondtestStringArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "secondtestString_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *SecondServiceSecondtestStringArgs) StructDefinition() thrift.StructDefinition {
	return secondServiceSecondtestStringArgsStructDefinition
}

func (p *SecondServiceSecondtestStringArgs) GetThing() string {
	return p.Thing
}

func (p *SecondServiceSecondtestStringArgs) SetThing(v string) {
	p.Thing = v
}
func (p *SecondServiceSecondtestStringArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SecondServiceSecondtestStringArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Thing = v
	}
	return nil
}

func (p *SecondServiceSecondtestStringArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("secondtestString_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SecondServiceSecondtestStringArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteString(string(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *SecondServiceSecondtestStringArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"SecondServiceSecondtestStringArgs({thing: %v})",
		p.GetThing(),
	)
}

func (p *SecondServiceSecondtestStringResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *SecondServiceSecondtestStringResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type SecondServiceSecondtestStringResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewSecondServiceSecondtestStringResult() *SecondServiceSecondtestStringResult {
	return &SecondServiceSecondtestStringResult{}
}

var secondServiceSecondtestStringResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "secondtestString_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *SecondServiceSecondtestStringResult) StructDefinition() thrift.StructDefinition {
	return secondServiceSecondtestStringResultStructDefinition
}

var SecondServiceSecondtestStringResult_Success_DEFAULT string

func (p *SecondServiceSecondtestStringResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return SecondServiceSecondtestStringResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *SecondServiceSecondtestStringResult) SetSuccess(v string) {
	p.Success = &v
}
func (p *SecondServiceSecondtestStringResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SecondServiceSecondtestStringResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SecondServiceSecondtestStringResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SecondServiceSecondtestStringResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("secondtestString_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SecondServiceSecondtestStringResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SecondServiceSecondtestStringResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"SecondServiceSecondtestStringResult({success: %v})",
		p.GetSuccess(),
	)
}
