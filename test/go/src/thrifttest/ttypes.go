// Autogenerated by Thrift Compiler ()
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrifttest

import (
	"bytes"
	"fmt"
	"github.com/upfluence/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal
var GoUnusedProtection__ int

// Docstring!
type Numberz int64

const (
	Numberz_ONE   Numberz = 1
	Numberz_TWO   Numberz = 2
	Numberz_THREE Numberz = 3
	Numberz_FIVE  Numberz = 5
	Numberz_SIX   Numberz = 6
	Numberz_EIGHT Numberz = 8
)

func (p Numberz) String() string {
	switch p {
	case Numberz_ONE:
		return "Numberz_ONE"
	case Numberz_TWO:
		return "Numberz_TWO"
	case Numberz_THREE:
		return "Numberz_THREE"
	case Numberz_FIVE:
		return "Numberz_FIVE"
	case Numberz_SIX:
		return "Numberz_SIX"
	case Numberz_EIGHT:
		return "Numberz_EIGHT"
	}
	return "<UNSET>"
}

func NumberzFromString(s string) (Numberz, error) {
	switch s {
	case "Numberz_ONE":
		return Numberz_ONE, nil
	case "Numberz_TWO":
		return Numberz_TWO, nil
	case "Numberz_THREE":
		return Numberz_THREE, nil
	case "Numberz_FIVE":
		return Numberz_FIVE, nil
	case "Numberz_SIX":
		return Numberz_SIX, nil
	case "Numberz_EIGHT":
		return Numberz_EIGHT, nil
	}
	return Numberz(0), fmt.Errorf("not a valid Numberz string")
}

func NumberzPtr(v Numberz) *Numberz { return &v }

type UserId int64

func UserIdPtr(v UserId) *UserId { return &v }

type MapType map[string]*Bonk

func MapTypePtr(v MapType) *MapType { return &v }

// Attributes:
//   - Message
//   - Type
type Bonk struct {
	Message string `thrift:"message,1" json:"message"`
	Type    int32  `thrift:"type,2" json:"type"`
}

func NewBonk() *Bonk {
	return &Bonk{}
}

var bonkStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "Bonk",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "message",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "type",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *Bonk) StructDefinition() thrift.StructDefinition {
	return bonkStructDefinition
}

func (p *Bonk) GetMessage() string {
	return p.Message
}

func (p *Bonk) SetMessage(v string) {
	p.Message = v
}

func (p *Bonk) GetType() int32 {
	return p.Type
}

func (p *Bonk) SetType(v int32) {
	p.Type = v
}
func (p *Bonk) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Bonk) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *Bonk) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *Bonk) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Bonk"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Bonk) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *Bonk) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *Bonk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"Bonk({message: %v, type: %v})",
		p.GetMessage(),
		p.GetType(),
	)
}

// Attributes:
//   - ImTrue
//   - ImFalse
type Bools struct {
	ImTrue  bool `thrift:"im_true,1" json:"im_true"`
	ImFalse bool `thrift:"im_false,2" json:"im_false"`
}

func NewBools() *Bools {
	return &Bools{}
}

var boolsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "Bools",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "im_true",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "im_false",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *Bools) StructDefinition() thrift.StructDefinition {
	return boolsStructDefinition
}

func (p *Bools) GetImTrue() bool {
	return p.ImTrue
}

func (p *Bools) SetImTrue(v bool) {
	p.ImTrue = v
}

func (p *Bools) GetImFalse() bool {
	return p.ImFalse
}

func (p *Bools) SetImFalse(v bool) {
	p.ImFalse = v
}
func (p *Bools) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Bools) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ImTrue = v
	}
	return nil
}

func (p *Bools) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ImFalse = v
	}
	return nil
}

func (p *Bools) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Bools"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Bools) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("im_true", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:im_true: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.ImTrue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.im_true (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:im_true: ", p), err)
	}
	return err
}

func (p *Bools) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("im_false", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:im_false: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.ImFalse)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.im_false (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:im_false: ", p), err)
	}
	return err
}

func (p *Bools) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"Bools({im_true: %v, im_false: %v})",
		p.GetImTrue(),
		p.GetImFalse(),
	)
}

// Attributes:
//   - StringThing
//   - ByteThing
//   - I32Thing
//   - I64Thing
type Xtruct struct {
	StringThing string `thrift:"string_thing,1" json:"string_thing"`
	// unused fields # 2 to 3
	ByteThing int8 `thrift:"byte_thing,4" json:"byte_thing"`
	// unused fields # 5 to 8
	I32Thing int32 `thrift:"i32_thing,9" json:"i32_thing"`
	// unused field # 10
	I64Thing int64 `thrift:"i64_thing,11" json:"i64_thing"`
}

func NewXtruct() *Xtruct {
	return &Xtruct{}
}

var xtructStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "Xtruct",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "string_thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "byte_thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "i32_thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "i64_thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *Xtruct) StructDefinition() thrift.StructDefinition {
	return xtructStructDefinition
}

func (p *Xtruct) GetStringThing() string {
	return p.StringThing
}

func (p *Xtruct) SetStringThing(v string) {
	p.StringThing = v
}

func (p *Xtruct) GetByteThing() int8 {
	return p.ByteThing
}

func (p *Xtruct) SetByteThing(v int8) {
	p.ByteThing = v
}

func (p *Xtruct) GetI32Thing() int32 {
	return p.I32Thing
}

func (p *Xtruct) SetI32Thing(v int32) {
	p.I32Thing = v
}

func (p *Xtruct) GetI64Thing() int64 {
	return p.I64Thing
}

func (p *Xtruct) SetI64Thing(v int64) {
	p.I64Thing = v
}
func (p *Xtruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Xtruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StringThing = v
	}
	return nil
}

func (p *Xtruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.ByteThing = temp
	}
	return nil
}

func (p *Xtruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.I32Thing = v
	}
	return nil
}

func (p *Xtruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.I64Thing = v
	}
	return nil
}

func (p *Xtruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Xtruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Xtruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("string_thing", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:string_thing: ", p), err)
	}
	if err := oprot.WriteString(string(p.StringThing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.string_thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:string_thing: ", p), err)
	}
	return err
}

func (p *Xtruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("byte_thing", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:byte_thing: ", p), err)
	}
	if err := oprot.WriteByte(byte(p.ByteThing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.byte_thing (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:byte_thing: ", p), err)
	}
	return err
}

func (p *Xtruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("i32_thing", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:i32_thing: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.I32Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.i32_thing (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:i32_thing: ", p), err)
	}
	return err
}

func (p *Xtruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("i64_thing", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:i64_thing: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.I64Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.i64_thing (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:i64_thing: ", p), err)
	}
	return err
}

func (p *Xtruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"Xtruct({string_thing: %v, byte_thing: %v, i32_thing: %v, i64_thing: %v})",
		p.GetStringThing(),
		p.GetByteThing(),
		p.GetI32Thing(),
		p.GetI64Thing(),
	)
}

// Attributes:
//   - ByteThing
//   - StructThing
//   - I32Thing
type Xtruct2 struct {
	ByteThing   int8    `thrift:"byte_thing,1" json:"byte_thing"`
	StructThing *Xtruct `thrift:"struct_thing,2" json:"struct_thing"`
	I32Thing    int32   `thrift:"i32_thing,3" json:"i32_thing"`
}

func NewXtruct2() *Xtruct2 {
	return &Xtruct2{}
}

var xtruct2StructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "Xtruct2",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "byte_thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "struct_thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "i32_thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *Xtruct2) StructDefinition() thrift.StructDefinition {
	return xtruct2StructDefinition
}

func (p *Xtruct2) GetByteThing() int8 {
	return p.ByteThing
}

func (p *Xtruct2) SetByteThing(v int8) {
	p.ByteThing = v
}

var Xtruct2_StructThing_DEFAULT *Xtruct

func (p *Xtruct2) GetStructThing() *Xtruct {
	if !p.IsSetStructThing() {
		return Xtruct2_StructThing_DEFAULT
	}
	return p.StructThing
}

func (p *Xtruct2) SetStructThing(v *Xtruct) {
	p.StructThing = v
}

func (p *Xtruct2) GetI32Thing() int32 {
	return p.I32Thing
}

func (p *Xtruct2) SetI32Thing(v int32) {
	p.I32Thing = v
}
func (p *Xtruct2) IsSetStructThing() bool {
	return p.StructThing != nil
}

func (p *Xtruct2) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Xtruct2) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.ByteThing = temp
	}
	return nil
}

func (p *Xtruct2) ReadField2(iprot thrift.TProtocol) error {
	p.StructThing = NewXtruct()
	if err := p.StructThing.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructThing), err)
	}
	return nil
}

func (p *Xtruct2) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.I32Thing = v
	}
	return nil
}

func (p *Xtruct2) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Xtruct2"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Xtruct2) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("byte_thing", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:byte_thing: ", p), err)
	}
	if err := oprot.WriteByte(byte(p.ByteThing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.byte_thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:byte_thing: ", p), err)
	}
	return err
}

func (p *Xtruct2) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("struct_thing", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:struct_thing: ", p), err)
	}
	if err := p.StructThing.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructThing), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:struct_thing: ", p), err)
	}
	return err
}

func (p *Xtruct2) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("i32_thing", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:i32_thing: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.I32Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.i32_thing (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:i32_thing: ", p), err)
	}
	return err
}

func (p *Xtruct2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"Xtruct2({byte_thing: %v, struct_thing: %v, i32_thing: %v})",
		p.GetByteThing(),
		p.GetStructThing(),
		p.GetI32Thing(),
	)
}

// Attributes:
//   - StringThing
//   - Changed
//   - I32Thing
//   - I64Thing
type Xtruct3 struct {
	StringThing string `thrift:"string_thing,1" json:"string_thing"`
	// unused fields # 2 to 3
	Changed int32 `thrift:"changed,4" json:"changed"`
	// unused fields # 5 to 8
	I32Thing int32 `thrift:"i32_thing,9" json:"i32_thing"`
	// unused field # 10
	I64Thing int64 `thrift:"i64_thing,11" json:"i64_thing"`
}

func NewXtruct3() *Xtruct3 {
	return &Xtruct3{}
}

var xtruct3StructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "Xtruct3",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "string_thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "changed",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "i32_thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "i64_thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *Xtruct3) StructDefinition() thrift.StructDefinition {
	return xtruct3StructDefinition
}

func (p *Xtruct3) GetStringThing() string {
	return p.StringThing
}

func (p *Xtruct3) SetStringThing(v string) {
	p.StringThing = v
}

func (p *Xtruct3) GetChanged() int32 {
	return p.Changed
}

func (p *Xtruct3) SetChanged(v int32) {
	p.Changed = v
}

func (p *Xtruct3) GetI32Thing() int32 {
	return p.I32Thing
}

func (p *Xtruct3) SetI32Thing(v int32) {
	p.I32Thing = v
}

func (p *Xtruct3) GetI64Thing() int64 {
	return p.I64Thing
}

func (p *Xtruct3) SetI64Thing(v int64) {
	p.I64Thing = v
}
func (p *Xtruct3) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Xtruct3) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StringThing = v
	}
	return nil
}

func (p *Xtruct3) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Changed = v
	}
	return nil
}

func (p *Xtruct3) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.I32Thing = v
	}
	return nil
}

func (p *Xtruct3) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.I64Thing = v
	}
	return nil
}

func (p *Xtruct3) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Xtruct3"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Xtruct3) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("string_thing", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:string_thing: ", p), err)
	}
	if err := oprot.WriteString(string(p.StringThing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.string_thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:string_thing: ", p), err)
	}
	return err
}

func (p *Xtruct3) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("changed", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:changed: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Changed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.changed (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:changed: ", p), err)
	}
	return err
}

func (p *Xtruct3) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("i32_thing", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:i32_thing: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.I32Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.i32_thing (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:i32_thing: ", p), err)
	}
	return err
}

func (p *Xtruct3) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("i64_thing", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:i64_thing: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.I64Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.i64_thing (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:i64_thing: ", p), err)
	}
	return err
}

func (p *Xtruct3) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"Xtruct3({string_thing: %v, changed: %v, i32_thing: %v, i64_thing: %v})",
		p.GetStringThing(),
		p.GetChanged(),
		p.GetI32Thing(),
		p.GetI64Thing(),
	)
}

// Attributes:
//   - UserMap
//   - Xtructs
type Insanity struct {
	UserMap map[Numberz]UserId `thrift:"userMap,1" json:"userMap"`
	Xtructs []*Xtruct          `thrift:"xtructs,2" json:"xtructs"`
}

func NewInsanity() *Insanity {
	return &Insanity{}
}

var insanityStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "Insanity",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "userMap",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "xtructs",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *Insanity) StructDefinition() thrift.StructDefinition {
	return insanityStructDefinition
}

func (p *Insanity) GetUserMap() map[Numberz]UserId {
	return p.UserMap
}

func (p *Insanity) SetUserMap(v map[Numberz]UserId) {
	p.UserMap = v
}

func (p *Insanity) GetXtructs() []*Xtruct {
	return p.Xtructs
}

func (p *Insanity) SetXtructs(v []*Xtruct) {
	p.Xtructs = v
}
func (p *Insanity) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Insanity) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[Numberz]UserId, size)
	p.UserMap = tMap
	for i := 0; i < size; i++ {
		var _key0 Numberz
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Numberz(v)
			_key0 = temp
		}
		var _val1 UserId
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := UserId(v)
			_val1 = temp
		}
		p.UserMap[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Insanity) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Xtruct, 0, size)
	p.Xtructs = tSlice
	for i := 0; i < size; i++ {
		_elem2 := NewXtruct()
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Xtructs = append(p.Xtructs, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Insanity) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Insanity"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Insanity) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userMap", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(p.UserMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.UserMap {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userMap: ", p), err)
	}
	return err
}

func (p *Insanity) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("xtructs", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:xtructs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Xtructs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Xtructs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:xtructs: ", p), err)
	}
	return err
}

func (p *Insanity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"Insanity({userMap: %v, xtructs: %v})",
		p.GetUserMap(),
		p.GetXtructs(),
	)
}

// Attributes:
//   - StringField
//   - SetField
//   - BinaryField
type CrazyNesting struct {
	StringField string             `thrift:"string_field,1" json:"string_field"`
	SetField    map[*Insanity]bool `thrift:"set_field,2" json:"set_field,omitempty"`
	// unused field # 3
	BinaryField []byte `thrift:"binary_field,4" json:"binary_field"`
}

func NewCrazyNesting() *CrazyNesting {
	return &CrazyNesting{}
}

var crazyNestingStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "CrazyNesting",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "string_field",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "set_field",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "binary_field",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *CrazyNesting) StructDefinition() thrift.StructDefinition {
	return crazyNestingStructDefinition
}

func (p *CrazyNesting) GetStringField() string {
	return p.StringField
}

func (p *CrazyNesting) SetStringField(v string) {
	p.StringField = v
}

var CrazyNesting_SetField_DEFAULT map[*Insanity]bool

func (p *CrazyNesting) GetSetField() map[*Insanity]bool {
	return p.SetField
}

func (p *CrazyNesting) SetSetField(v map[*Insanity]bool) {
	p.SetField = v
}

func (p *CrazyNesting) GetBinaryField() []byte {
	return p.BinaryField
}

func (p *CrazyNesting) SetBinaryField(v []byte) {
	p.BinaryField = v
}
func (p *CrazyNesting) IsSetSetField() bool {
	return p.SetField != nil
}

func (p *CrazyNesting) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CrazyNesting) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StringField = v
	}
	return nil
}

func (p *CrazyNesting) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[*Insanity]bool, size)
	p.SetField = tSet
	for i := 0; i < size; i++ {
		_elem3 := NewInsanity()
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.SetField[_elem3] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *CrazyNesting) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.BinaryField = v
	}
	return nil
}

func (p *CrazyNesting) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CrazyNesting"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CrazyNesting) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("string_field", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:string_field: ", p), err)
	}
	if err := oprot.WriteString(string(p.StringField)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.string_field (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:string_field: ", p), err)
	}
	return err
}

func (p *CrazyNesting) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSetField() {
		if err := oprot.WriteFieldBegin("set_field", thrift.SET, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:set_field: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.SetField)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.SetField {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:set_field: ", p), err)
		}
	}
	return err
}

func (p *CrazyNesting) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("binary_field", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:binary_field: ", p), err)
	}
	if err := oprot.WriteBinary(p.BinaryField); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.binary_field (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:binary_field: ", p), err)
	}
	return err
}

func (p *CrazyNesting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"CrazyNesting({string_field: %v, set_field: %v, binary_field: %v})",
		p.GetStringField(),
		p.GetSetField(),
		p.GetBinaryField(),
	)
}

// Attributes:
//   - ErrorCode
//   - Message
type Xception struct {
	ErrorCode int32  `thrift:"errorCode,1" json:"errorCode"`
	Message   string `thrift:"message,2" json:"message"`
}

func NewXception() *Xception {
	return &Xception{}
}

var xceptionStructDefinition = thrift.StructDefinition{
	Namespace:   Namespace,
	IsException: true,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "Xception",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "errorCode",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "message",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *Xception) StructDefinition() thrift.StructDefinition {
	return xceptionStructDefinition
}

func (p *Xception) GetErrorCode() int32 {
	return p.ErrorCode
}

func (p *Xception) SetErrorCode(v int32) {
	p.ErrorCode = v
}

func (p *Xception) GetMessage() string {
	return p.Message
}

func (p *Xception) SetMessage(v string) {
	p.Message = v
}
func (p *Xception) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Xception) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *Xception) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *Xception) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Xception"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Xception) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err)
	}
	return err
}

func (p *Xception) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *Xception) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"Xception({errorCode: %v, message: %v})",
		p.GetErrorCode(),
		p.GetMessage(),
	)
}

func (p *Xception) Error() string {
	return p.String()
}

// Attributes:
//   - ErrorCode
//   - StructThing
type Xception2 struct {
	ErrorCode   int32   `thrift:"errorCode,1" json:"errorCode"`
	StructThing *Xtruct `thrift:"struct_thing,2" json:"struct_thing"`
}

func NewXception2() *Xception2 {
	return &Xception2{}
}

var xception2StructDefinition = thrift.StructDefinition{
	Namespace:   Namespace,
	IsException: true,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "Xception2",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "errorCode",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "struct_thing",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *Xception2) StructDefinition() thrift.StructDefinition {
	return xception2StructDefinition
}

func (p *Xception2) GetErrorCode() int32 {
	return p.ErrorCode
}

func (p *Xception2) SetErrorCode(v int32) {
	p.ErrorCode = v
}

var Xception2_StructThing_DEFAULT *Xtruct

func (p *Xception2) GetStructThing() *Xtruct {
	if !p.IsSetStructThing() {
		return Xception2_StructThing_DEFAULT
	}
	return p.StructThing
}

func (p *Xception2) SetStructThing(v *Xtruct) {
	p.StructThing = v
}
func (p *Xception2) IsSetStructThing() bool {
	return p.StructThing != nil
}

func (p *Xception2) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Xception2) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *Xception2) ReadField2(iprot thrift.TProtocol) error {
	p.StructThing = NewXtruct()
	if err := p.StructThing.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructThing), err)
	}
	return nil
}

func (p *Xception2) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Xception2"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Xception2) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err)
	}
	return err
}

func (p *Xception2) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("struct_thing", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:struct_thing: ", p), err)
	}
	if err := p.StructThing.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructThing), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:struct_thing: ", p), err)
	}
	return err
}

func (p *Xception2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"Xception2({errorCode: %v, struct_thing: %v})",
		p.GetErrorCode(),
		p.GetStructThing(),
	)
}

func (p *Xception2) Error() string {
	return p.String()
}

type EmptyStruct struct {
}

func NewEmptyStruct() *EmptyStruct {
	return &EmptyStruct{}
}

var emptyStructStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "EmptyStruct",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{},
}

func (p *EmptyStruct) StructDefinition() thrift.StructDefinition {
	return emptyStructStructDefinition
}

func (p *EmptyStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmptyStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmptyStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmptyStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"EmptyStruct({})",
	)
}

// Attributes:
//   - Field
type OneField struct {
	Field *EmptyStruct `thrift:"field,1" json:"field"`
}

func NewOneField() *OneField {
	return &OneField{}
}

var oneFieldStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "OneField",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "field",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *OneField) StructDefinition() thrift.StructDefinition {
	return oneFieldStructDefinition
}

var OneField_Field_DEFAULT *EmptyStruct

func (p *OneField) GetField() *EmptyStruct {
	if !p.IsSetField() {
		return OneField_Field_DEFAULT
	}
	return p.Field
}

func (p *OneField) SetField(v *EmptyStruct) {
	p.Field = v
}
func (p *OneField) IsSetField() bool {
	return p.Field != nil
}

func (p *OneField) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OneField) ReadField1(iprot thrift.TProtocol) error {
	p.Field = NewEmptyStruct()
	if err := p.Field.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Field), err)
	}
	return nil
}

func (p *OneField) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OneField"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OneField) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("field", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err)
	}
	if err := p.Field.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Field), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err)
	}
	return err
}

func (p *OneField) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"OneField({field: %v})",
		p.GetField(),
	)
}

// Attributes:
//   - BeginInBoth
//   - OldString
//   - EndInBoth
type VersioningTestV1 struct {
	BeginInBoth int32 `thrift:"begin_in_both,1" json:"begin_in_both"`
	// unused field # 2
	OldString string `thrift:"old_string,3" json:"old_string"`
	// unused fields # 4 to 11
	EndInBoth int32 `thrift:"end_in_both,12" json:"end_in_both"`
}

func NewVersioningTestV1() *VersioningTestV1 {
	return &VersioningTestV1{}
}

var versioningTestV1StructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "VersioningTestV1",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "begin_in_both",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "old_string",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "end_in_both",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *VersioningTestV1) StructDefinition() thrift.StructDefinition {
	return versioningTestV1StructDefinition
}

func (p *VersioningTestV1) GetBeginInBoth() int32 {
	return p.BeginInBoth
}

func (p *VersioningTestV1) SetBeginInBoth(v int32) {
	p.BeginInBoth = v
}

func (p *VersioningTestV1) GetOldString() string {
	return p.OldString
}

func (p *VersioningTestV1) SetOldString(v string) {
	p.OldString = v
}

func (p *VersioningTestV1) GetEndInBoth() int32 {
	return p.EndInBoth
}

func (p *VersioningTestV1) SetEndInBoth(v int32) {
	p.EndInBoth = v
}
func (p *VersioningTestV1) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VersioningTestV1) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BeginInBoth = v
	}
	return nil
}

func (p *VersioningTestV1) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OldString = v
	}
	return nil
}

func (p *VersioningTestV1) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.EndInBoth = v
	}
	return nil
}

func (p *VersioningTestV1) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VersioningTestV1"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VersioningTestV1) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("begin_in_both", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:begin_in_both: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BeginInBoth)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.begin_in_both (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:begin_in_both: ", p), err)
	}
	return err
}

func (p *VersioningTestV1) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_string", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:old_string: ", p), err)
	}
	if err := oprot.WriteString(string(p.OldString)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.old_string (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:old_string: ", p), err)
	}
	return err
}

func (p *VersioningTestV1) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_in_both", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:end_in_both: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EndInBoth)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.end_in_both (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:end_in_both: ", p), err)
	}
	return err
}

func (p *VersioningTestV1) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"VersioningTestV1({begin_in_both: %v, old_string: %v, end_in_both: %v})",
		p.GetBeginInBoth(),
		p.GetOldString(),
		p.GetEndInBoth(),
	)
}

// Attributes:
//   - BeginInBoth
//   - Newint_
//   - Newbyte_
//   - Newshort_
//   - Newlong_
//   - Newdouble_
//   - Newstruct_
//   - Newlist_
//   - Newset_
//   - Newmap_
//   - Newstring_
//   - EndInBoth
type VersioningTestV2 struct {
	BeginInBoth int32           `thrift:"begin_in_both,1" json:"begin_in_both"`
	Newint_     int32           `thrift:"newint,2" json:"newint"`
	Newbyte_    int8            `thrift:"newbyte,3" json:"newbyte"`
	Newshort_   int16           `thrift:"newshort,4" json:"newshort"`
	Newlong_    int64           `thrift:"newlong,5" json:"newlong"`
	Newdouble_  float64         `thrift:"newdouble,6" json:"newdouble"`
	Newstruct_  *Bonk           `thrift:"newstruct,7" json:"newstruct"`
	Newlist_    []int32         `thrift:"newlist,8" json:"newlist"`
	Newset_     map[int32]bool  `thrift:"newset,9" json:"newset"`
	Newmap_     map[int32]int32 `thrift:"newmap,10" json:"newmap"`
	Newstring_  string          `thrift:"newstring,11" json:"newstring"`
	EndInBoth   int32           `thrift:"end_in_both,12" json:"end_in_both"`
}

func NewVersioningTestV2() *VersioningTestV2 {
	return &VersioningTestV2{}
}

var versioningTestV2StructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "VersioningTestV2",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "begin_in_both",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "newint",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "newbyte",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "newshort",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "newlong",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "newdouble",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "newstruct",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "newlist",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "newset",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "newmap",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "newstring",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "end_in_both",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *VersioningTestV2) StructDefinition() thrift.StructDefinition {
	return versioningTestV2StructDefinition
}

func (p *VersioningTestV2) GetBeginInBoth() int32 {
	return p.BeginInBoth
}

func (p *VersioningTestV2) SetBeginInBoth(v int32) {
	p.BeginInBoth = v
}

func (p *VersioningTestV2) GetNewint_() int32 {
	return p.Newint_
}

func (p *VersioningTestV2) SetNewint_(v int32) {
	p.Newint_ = v
}

func (p *VersioningTestV2) GetNewbyte_() int8 {
	return p.Newbyte_
}

func (p *VersioningTestV2) SetNewbyte_(v int8) {
	p.Newbyte_ = v
}

func (p *VersioningTestV2) GetNewshort_() int16 {
	return p.Newshort_
}

func (p *VersioningTestV2) SetNewshort_(v int16) {
	p.Newshort_ = v
}

func (p *VersioningTestV2) GetNewlong_() int64 {
	return p.Newlong_
}

func (p *VersioningTestV2) SetNewlong_(v int64) {
	p.Newlong_ = v
}

func (p *VersioningTestV2) GetNewdouble_() float64 {
	return p.Newdouble_
}

func (p *VersioningTestV2) SetNewdouble_(v float64) {
	p.Newdouble_ = v
}

var VersioningTestV2_Newstruct__DEFAULT *Bonk

func (p *VersioningTestV2) GetNewstruct_() *Bonk {
	if !p.IsSetNewstruct_() {
		return VersioningTestV2_Newstruct__DEFAULT
	}
	return p.Newstruct_
}

func (p *VersioningTestV2) SetNewstruct_(v *Bonk) {
	p.Newstruct_ = v
}

func (p *VersioningTestV2) GetNewlist_() []int32 {
	return p.Newlist_
}

func (p *VersioningTestV2) SetNewlist_(v []int32) {
	p.Newlist_ = v
}

func (p *VersioningTestV2) GetNewset_() map[int32]bool {
	return p.Newset_
}

func (p *VersioningTestV2) SetNewset_(v map[int32]bool) {
	p.Newset_ = v
}

func (p *VersioningTestV2) GetNewmap_() map[int32]int32 {
	return p.Newmap_
}

func (p *VersioningTestV2) SetNewmap_(v map[int32]int32) {
	p.Newmap_ = v
}

func (p *VersioningTestV2) GetNewstring_() string {
	return p.Newstring_
}

func (p *VersioningTestV2) SetNewstring_(v string) {
	p.Newstring_ = v
}

func (p *VersioningTestV2) GetEndInBoth() int32 {
	return p.EndInBoth
}

func (p *VersioningTestV2) SetEndInBoth(v int32) {
	p.EndInBoth = v
}
func (p *VersioningTestV2) IsSetNewstruct_() bool {
	return p.Newstruct_ != nil
}

func (p *VersioningTestV2) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VersioningTestV2) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BeginInBoth = v
	}
	return nil
}

func (p *VersioningTestV2) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Newint_ = v
	}
	return nil
}

func (p *VersioningTestV2) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Newbyte_ = temp
	}
	return nil
}

func (p *VersioningTestV2) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Newshort_ = v
	}
	return nil
}

func (p *VersioningTestV2) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Newlong_ = v
	}
	return nil
}

func (p *VersioningTestV2) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Newdouble_ = v
	}
	return nil
}

func (p *VersioningTestV2) ReadField7(iprot thrift.TProtocol) error {
	p.Newstruct_ = NewBonk()
	if err := p.Newstruct_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Newstruct_), err)
	}
	return nil
}

func (p *VersioningTestV2) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.Newlist_ = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.Newlist_ = append(p.Newlist_, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VersioningTestV2) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[int32]bool, size)
	p.Newset_ = tSet
	for i := 0; i < size; i++ {
		var _elem5 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem5 = v
		}
		p.Newset_[_elem5] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *VersioningTestV2) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]int32, size)
	p.Newmap_ = tMap
	for i := 0; i < size; i++ {
		var _key6 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key6 = v
		}
		var _val7 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val7 = v
		}
		p.Newmap_[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *VersioningTestV2) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Newstring_ = v
	}
	return nil
}

func (p *VersioningTestV2) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.EndInBoth = v
	}
	return nil
}

func (p *VersioningTestV2) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VersioningTestV2"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VersioningTestV2) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("begin_in_both", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:begin_in_both: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BeginInBoth)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.begin_in_both (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:begin_in_both: ", p), err)
	}
	return err
}

func (p *VersioningTestV2) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newint", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:newint: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Newint_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.newint (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:newint: ", p), err)
	}
	return err
}

func (p *VersioningTestV2) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newbyte", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newbyte: ", p), err)
	}
	if err := oprot.WriteByte(byte(p.Newbyte_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.newbyte (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newbyte: ", p), err)
	}
	return err
}

func (p *VersioningTestV2) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newshort", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:newshort: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Newshort_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.newshort (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:newshort: ", p), err)
	}
	return err
}

func (p *VersioningTestV2) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newlong", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:newlong: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Newlong_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.newlong (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:newlong: ", p), err)
	}
	return err
}

func (p *VersioningTestV2) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newdouble", thrift.DOUBLE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:newdouble: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Newdouble_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.newdouble (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:newdouble: ", p), err)
	}
	return err
}

func (p *VersioningTestV2) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newstruct", thrift.STRUCT, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:newstruct: ", p), err)
	}
	if err := p.Newstruct_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Newstruct_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:newstruct: ", p), err)
	}
	return err
}

func (p *VersioningTestV2) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newlist", thrift.LIST, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:newlist: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Newlist_)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Newlist_ {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:newlist: ", p), err)
	}
	return err
}

func (p *VersioningTestV2) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newset", thrift.SET, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:newset: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.Newset_)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Newset_ {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:newset: ", p), err)
	}
	return err
}

func (p *VersioningTestV2) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newmap", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:newmap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.Newmap_)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Newmap_ {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:newmap: ", p), err)
	}
	return err
}

func (p *VersioningTestV2) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newstring", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:newstring: ", p), err)
	}
	if err := oprot.WriteString(string(p.Newstring_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.newstring (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:newstring: ", p), err)
	}
	return err
}

func (p *VersioningTestV2) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_in_both", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:end_in_both: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EndInBoth)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.end_in_both (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:end_in_both: ", p), err)
	}
	return err
}

func (p *VersioningTestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"VersioningTestV2({begin_in_both: %v, newint: %v, newbyte: %v, newshort: %v, newlong: %v, newdouble: %v, newstruct: %v, newlist: %v, newset: %v, newmap: %v, newstring: %v, end_in_both: %v})",
		p.GetBeginInBoth(),
		p.GetNewint_(),
		p.GetNewbyte_(),
		p.GetNewshort_(),
		p.GetNewlong_(),
		p.GetNewdouble_(),
		p.GetNewstruct_(),
		p.GetNewlist_(),
		p.GetNewset_(),
		p.GetNewmap_(),
		p.GetNewstring_(),
		p.GetEndInBoth(),
	)
}

// Attributes:
//   - Myints
//   - Hello
type ListTypeVersioningV1 struct {
	Myints []int32 `thrift:"myints,1" json:"myints"`
	Hello  string  `thrift:"hello,2" json:"hello"`
}

func NewListTypeVersioningV1() *ListTypeVersioningV1 {
	return &ListTypeVersioningV1{}
}

var listTypeVersioningV1StructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "ListTypeVersioningV1",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "myints",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "hello",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ListTypeVersioningV1) StructDefinition() thrift.StructDefinition {
	return listTypeVersioningV1StructDefinition
}

func (p *ListTypeVersioningV1) GetMyints() []int32 {
	return p.Myints
}

func (p *ListTypeVersioningV1) SetMyints(v []int32) {
	p.Myints = v
}

func (p *ListTypeVersioningV1) GetHello() string {
	return p.Hello
}

func (p *ListTypeVersioningV1) SetHello(v string) {
	p.Hello = v
}
func (p *ListTypeVersioningV1) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListTypeVersioningV1) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.Myints = tSlice
	for i := 0; i < size; i++ {
		var _elem8 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem8 = v
		}
		p.Myints = append(p.Myints, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListTypeVersioningV1) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Hello = v
	}
	return nil
}

func (p *ListTypeVersioningV1) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListTypeVersioningV1"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListTypeVersioningV1) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("myints", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:myints: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Myints)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Myints {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:myints: ", p), err)
	}
	return err
}

func (p *ListTypeVersioningV1) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hello", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hello: ", p), err)
	}
	if err := oprot.WriteString(string(p.Hello)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hello (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hello: ", p), err)
	}
	return err
}

func (p *ListTypeVersioningV1) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ListTypeVersioningV1({myints: %v, hello: %v})",
		p.GetMyints(),
		p.GetHello(),
	)
}

// Attributes:
//   - Strings
//   - Hello
type ListTypeVersioningV2 struct {
	Strings []string `thrift:"strings,1" json:"strings"`
	Hello   string   `thrift:"hello,2" json:"hello"`
}

func NewListTypeVersioningV2() *ListTypeVersioningV2 {
	return &ListTypeVersioningV2{}
}

var listTypeVersioningV2StructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "ListTypeVersioningV2",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "strings",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "hello",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ListTypeVersioningV2) StructDefinition() thrift.StructDefinition {
	return listTypeVersioningV2StructDefinition
}

func (p *ListTypeVersioningV2) GetStrings() []string {
	return p.Strings
}

func (p *ListTypeVersioningV2) SetStrings(v []string) {
	p.Strings = v
}

func (p *ListTypeVersioningV2) GetHello() string {
	return p.Hello
}

func (p *ListTypeVersioningV2) SetHello(v string) {
	p.Hello = v
}
func (p *ListTypeVersioningV2) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListTypeVersioningV2) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Strings = tSlice
	for i := 0; i < size; i++ {
		var _elem9 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem9 = v
		}
		p.Strings = append(p.Strings, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListTypeVersioningV2) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Hello = v
	}
	return nil
}

func (p *ListTypeVersioningV2) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListTypeVersioningV2"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListTypeVersioningV2) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("strings", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:strings: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Strings)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Strings {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:strings: ", p), err)
	}
	return err
}

func (p *ListTypeVersioningV2) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hello", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hello: ", p), err)
	}
	if err := oprot.WriteString(string(p.Hello)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hello (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hello: ", p), err)
	}
	return err
}

func (p *ListTypeVersioningV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ListTypeVersioningV2({strings: %v, hello: %v})",
		p.GetStrings(),
		p.GetHello(),
	)
}

// Attributes:
//   - MapField
type GuessProtocolStruct struct {
	// unused fields # 1 to 6
	MapField map[string]string `thrift:"map_field,7" json:"map_field"`
}

func NewGuessProtocolStruct() *GuessProtocolStruct {
	return &GuessProtocolStruct{}
}

var guessProtocolStructStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "GuessProtocolStruct",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "map_field",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *GuessProtocolStruct) StructDefinition() thrift.StructDefinition {
	return guessProtocolStructStructDefinition
}

func (p *GuessProtocolStruct) GetMapField() map[string]string {
	return p.MapField
}

func (p *GuessProtocolStruct) SetMapField(v map[string]string) {
	p.MapField = v
}
func (p *GuessProtocolStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GuessProtocolStruct) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.MapField = tMap
	for i := 0; i < size; i++ {
		var _key10 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key10 = v
		}
		var _val11 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val11 = v
		}
		p.MapField[_key10] = _val11
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *GuessProtocolStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GuessProtocolStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GuessProtocolStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("map_field", thrift.MAP, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:map_field: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MapField)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MapField {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:map_field: ", p), err)
	}
	return err
}

func (p *GuessProtocolStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"GuessProtocolStruct({map_field: %v})",
		p.GetMapField(),
	)
}

// Attributes:
//   - B1
//   - B10
//   - B100
//   - CheckTrue
//   - B1000
//   - CheckFalse
//   - Vertwo2000
//   - ASet2500
//   - Vertwo3000
//   - BigNumbers
type LargeDeltas struct {
	B1 *Bools `thrift:"b1,1" json:"b1"`
	// unused fields # 2 to 9
	B10 *Bools `thrift:"b10,10" json:"b10"`
	// unused fields # 11 to 99
	B100 *Bools `thrift:"b100,100" json:"b100"`
	// unused fields # 101 to 499
	CheckTrue bool `thrift:"check_true,500" json:"check_true"`
	// unused fields # 501 to 999
	B1000 *Bools `thrift:"b1000,1000" json:"b1000"`
	// unused fields # 1001 to 1499
	CheckFalse bool `thrift:"check_false,1500" json:"check_false"`
	// unused fields # 1501 to 1999
	Vertwo2000 *VersioningTestV2 `thrift:"vertwo2000,2000" json:"vertwo2000"`
	// unused fields # 2001 to 2499
	ASet2500 map[string]bool `thrift:"a_set2500,2500" json:"a_set2500"`
	// unused fields # 2501 to 2999
	Vertwo3000 *VersioningTestV2 `thrift:"vertwo3000,3000" json:"vertwo3000"`
	// unused fields # 3001 to 3999
	BigNumbers []int32 `thrift:"big_numbers,4000" json:"big_numbers"`
}

func NewLargeDeltas() *LargeDeltas {
	return &LargeDeltas{}
}

var largeDeltasStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "LargeDeltas",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "b1",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "b10",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "b100",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "check_true",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "b1000",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "check_false",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "vertwo2000",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "a_set2500",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "vertwo3000",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "big_numbers",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *LargeDeltas) StructDefinition() thrift.StructDefinition {
	return largeDeltasStructDefinition
}

var LargeDeltas_B1_DEFAULT *Bools

func (p *LargeDeltas) GetB1() *Bools {
	if !p.IsSetB1() {
		return LargeDeltas_B1_DEFAULT
	}
	return p.B1
}

func (p *LargeDeltas) SetB1(v *Bools) {
	p.B1 = v
}

var LargeDeltas_B10_DEFAULT *Bools

func (p *LargeDeltas) GetB10() *Bools {
	if !p.IsSetB10() {
		return LargeDeltas_B10_DEFAULT
	}
	return p.B10
}

func (p *LargeDeltas) SetB10(v *Bools) {
	p.B10 = v
}

var LargeDeltas_B100_DEFAULT *Bools

func (p *LargeDeltas) GetB100() *Bools {
	if !p.IsSetB100() {
		return LargeDeltas_B100_DEFAULT
	}
	return p.B100
}

func (p *LargeDeltas) SetB100(v *Bools) {
	p.B100 = v
}

func (p *LargeDeltas) GetCheckTrue() bool {
	return p.CheckTrue
}

func (p *LargeDeltas) SetCheckTrue(v bool) {
	p.CheckTrue = v
}

var LargeDeltas_B1000_DEFAULT *Bools

func (p *LargeDeltas) GetB1000() *Bools {
	if !p.IsSetB1000() {
		return LargeDeltas_B1000_DEFAULT
	}
	return p.B1000
}

func (p *LargeDeltas) SetB1000(v *Bools) {
	p.B1000 = v
}

func (p *LargeDeltas) GetCheckFalse() bool {
	return p.CheckFalse
}

func (p *LargeDeltas) SetCheckFalse(v bool) {
	p.CheckFalse = v
}

var LargeDeltas_Vertwo2000_DEFAULT *VersioningTestV2

func (p *LargeDeltas) GetVertwo2000() *VersioningTestV2 {
	if !p.IsSetVertwo2000() {
		return LargeDeltas_Vertwo2000_DEFAULT
	}
	return p.Vertwo2000
}

func (p *LargeDeltas) SetVertwo2000(v *VersioningTestV2) {
	p.Vertwo2000 = v
}

func (p *LargeDeltas) GetASet2500() map[string]bool {
	return p.ASet2500
}

func (p *LargeDeltas) SetASet2500(v map[string]bool) {
	p.ASet2500 = v
}

var LargeDeltas_Vertwo3000_DEFAULT *VersioningTestV2

func (p *LargeDeltas) GetVertwo3000() *VersioningTestV2 {
	if !p.IsSetVertwo3000() {
		return LargeDeltas_Vertwo3000_DEFAULT
	}
	return p.Vertwo3000
}

func (p *LargeDeltas) SetVertwo3000(v *VersioningTestV2) {
	p.Vertwo3000 = v
}

func (p *LargeDeltas) GetBigNumbers() []int32 {
	return p.BigNumbers
}

func (p *LargeDeltas) SetBigNumbers(v []int32) {
	p.BigNumbers = v
}
func (p *LargeDeltas) IsSetB1() bool {
	return p.B1 != nil
}

func (p *LargeDeltas) IsSetB10() bool {
	return p.B10 != nil
}

func (p *LargeDeltas) IsSetB100() bool {
	return p.B100 != nil
}

func (p *LargeDeltas) IsSetB1000() bool {
	return p.B1000 != nil
}

func (p *LargeDeltas) IsSetVertwo2000() bool {
	return p.Vertwo2000 != nil
}

func (p *LargeDeltas) IsSetVertwo3000() bool {
	return p.Vertwo3000 != nil
}

func (p *LargeDeltas) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 100:
			if err := p.ReadField100(iprot); err != nil {
				return err
			}
		case 500:
			if err := p.ReadField500(iprot); err != nil {
				return err
			}
		case 1000:
			if err := p.ReadField1000(iprot); err != nil {
				return err
			}
		case 1500:
			if err := p.ReadField1500(iprot); err != nil {
				return err
			}
		case 2000:
			if err := p.ReadField2000(iprot); err != nil {
				return err
			}
		case 2500:
			if err := p.ReadField2500(iprot); err != nil {
				return err
			}
		case 3000:
			if err := p.ReadField3000(iprot); err != nil {
				return err
			}
		case 4000:
			if err := p.ReadField4000(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LargeDeltas) ReadField1(iprot thrift.TProtocol) error {
	p.B1 = NewBools()
	if err := p.B1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.B1), err)
	}
	return nil
}

func (p *LargeDeltas) ReadField10(iprot thrift.TProtocol) error {
	p.B10 = NewBools()
	if err := p.B10.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.B10), err)
	}
	return nil
}

func (p *LargeDeltas) ReadField100(iprot thrift.TProtocol) error {
	p.B100 = NewBools()
	if err := p.B100.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.B100), err)
	}
	return nil
}

func (p *LargeDeltas) ReadField500(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 500: ", err)
	} else {
		p.CheckTrue = v
	}
	return nil
}

func (p *LargeDeltas) ReadField1000(iprot thrift.TProtocol) error {
	p.B1000 = NewBools()
	if err := p.B1000.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.B1000), err)
	}
	return nil
}

func (p *LargeDeltas) ReadField1500(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1500: ", err)
	} else {
		p.CheckFalse = v
	}
	return nil
}

func (p *LargeDeltas) ReadField2000(iprot thrift.TProtocol) error {
	p.Vertwo2000 = NewVersioningTestV2()
	if err := p.Vertwo2000.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Vertwo2000), err)
	}
	return nil
}

func (p *LargeDeltas) ReadField2500(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.ASet2500 = tSet
	for i := 0; i < size; i++ {
		var _elem12 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem12 = v
		}
		p.ASet2500[_elem12] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *LargeDeltas) ReadField3000(iprot thrift.TProtocol) error {
	p.Vertwo3000 = NewVersioningTestV2()
	if err := p.Vertwo3000.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Vertwo3000), err)
	}
	return nil
}

func (p *LargeDeltas) ReadField4000(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.BigNumbers = tSlice
	for i := 0; i < size; i++ {
		var _elem13 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem13 = v
		}
		p.BigNumbers = append(p.BigNumbers, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LargeDeltas) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LargeDeltas"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField100(oprot); err != nil {
		return err
	}
	if err := p.writeField500(oprot); err != nil {
		return err
	}
	if err := p.writeField1000(oprot); err != nil {
		return err
	}
	if err := p.writeField1500(oprot); err != nil {
		return err
	}
	if err := p.writeField2000(oprot); err != nil {
		return err
	}
	if err := p.writeField2500(oprot); err != nil {
		return err
	}
	if err := p.writeField3000(oprot); err != nil {
		return err
	}
	if err := p.writeField4000(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LargeDeltas) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("b1", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:b1: ", p), err)
	}
	if err := p.B1.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.B1), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:b1: ", p), err)
	}
	return err
}

func (p *LargeDeltas) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("b10", thrift.STRUCT, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:b10: ", p), err)
	}
	if err := p.B10.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.B10), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:b10: ", p), err)
	}
	return err
}

func (p *LargeDeltas) writeField100(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("b100", thrift.STRUCT, 100); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 100:b100: ", p), err)
	}
	if err := p.B100.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.B100), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 100:b100: ", p), err)
	}
	return err
}

func (p *LargeDeltas) writeField500(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("check_true", thrift.BOOL, 500); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 500:check_true: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CheckTrue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.check_true (500) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 500:check_true: ", p), err)
	}
	return err
}

func (p *LargeDeltas) writeField1000(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("b1000", thrift.STRUCT, 1000); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1000:b1000: ", p), err)
	}
	if err := p.B1000.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.B1000), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1000:b1000: ", p), err)
	}
	return err
}

func (p *LargeDeltas) writeField1500(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("check_false", thrift.BOOL, 1500); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1500:check_false: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CheckFalse)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.check_false (1500) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1500:check_false: ", p), err)
	}
	return err
}

func (p *LargeDeltas) writeField2000(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vertwo2000", thrift.STRUCT, 2000); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2000:vertwo2000: ", p), err)
	}
	if err := p.Vertwo2000.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Vertwo2000), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2000:vertwo2000: ", p), err)
	}
	return err
}

func (p *LargeDeltas) writeField2500(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("a_set2500", thrift.SET, 2500); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2500:a_set2500: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.ASet2500)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.ASet2500 {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2500:a_set2500: ", p), err)
	}
	return err
}

func (p *LargeDeltas) writeField3000(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vertwo3000", thrift.STRUCT, 3000); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3000:vertwo3000: ", p), err)
	}
	if err := p.Vertwo3000.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Vertwo3000), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3000:vertwo3000: ", p), err)
	}
	return err
}

func (p *LargeDeltas) writeField4000(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("big_numbers", thrift.LIST, 4000); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4000:big_numbers: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.BigNumbers)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BigNumbers {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4000:big_numbers: ", p), err)
	}
	return err
}

func (p *LargeDeltas) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"LargeDeltas({b1: %v, b10: %v, b100: %v, check_true: %v, b1000: %v, check_false: %v, vertwo2000: %v, a_set2500: %v, vertwo3000: %v, big_numbers: %v})",
		p.GetB1(),
		p.GetB10(),
		p.GetB100(),
		p.GetCheckTrue(),
		p.GetB1000(),
		p.GetCheckFalse(),
		p.GetVertwo2000(),
		p.GetASet2500(),
		p.GetVertwo3000(),
		p.GetBigNumbers(),
	)
}

// Attributes:
//   - Integerlist
type NestedListsI32x2 struct {
	Integerlist [][]int32 `thrift:"integerlist,1" json:"integerlist"`
}

func NewNestedListsI32x2() *NestedListsI32x2 {
	return &NestedListsI32x2{}
}

var nestedListsI32x2StructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "NestedListsI32x2",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "integerlist",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *NestedListsI32x2) StructDefinition() thrift.StructDefinition {
	return nestedListsI32x2StructDefinition
}

func (p *NestedListsI32x2) GetIntegerlist() [][]int32 {
	return p.Integerlist
}

func (p *NestedListsI32x2) SetIntegerlist(v [][]int32) {
	p.Integerlist = v
}
func (p *NestedListsI32x2) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NestedListsI32x2) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]int32, 0, size)
	p.Integerlist = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]int32, 0, size)
		_elem14 := tSlice
		for i := 0; i < size; i++ {
			var _elem15 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem15 = v
			}
			_elem14 = append(_elem14, _elem15)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Integerlist = append(p.Integerlist, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NestedListsI32x2) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NestedListsI32x2"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NestedListsI32x2) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("integerlist", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:integerlist: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.Integerlist)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Integerlist {
		if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:integerlist: ", p), err)
	}
	return err
}

func (p *NestedListsI32x2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"NestedListsI32x2({integerlist: %v})",
		p.GetIntegerlist(),
	)
}

// Attributes:
//   - Integerlist
type NestedListsI32x3 struct {
	Integerlist [][][]int32 `thrift:"integerlist,1" json:"integerlist"`
}

func NewNestedListsI32x3() *NestedListsI32x3 {
	return &NestedListsI32x3{}
}

var nestedListsI32x3StructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "NestedListsI32x3",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "integerlist",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *NestedListsI32x3) StructDefinition() thrift.StructDefinition {
	return nestedListsI32x3StructDefinition
}

func (p *NestedListsI32x3) GetIntegerlist() [][][]int32 {
	return p.Integerlist
}

func (p *NestedListsI32x3) SetIntegerlist(v [][][]int32) {
	p.Integerlist = v
}
func (p *NestedListsI32x3) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NestedListsI32x3) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][][]int32, 0, size)
	p.Integerlist = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([][]int32, 0, size)
		_elem16 := tSlice
		for i := 0; i < size; i++ {
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			tSlice := make([]int32, 0, size)
			_elem17 := tSlice
			for i := 0; i < size; i++ {
				var _elem18 int32
				if v, err := iprot.ReadI32(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					_elem18 = v
				}
				_elem17 = append(_elem17, _elem18)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
			_elem16 = append(_elem16, _elem17)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Integerlist = append(p.Integerlist, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NestedListsI32x3) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NestedListsI32x3"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NestedListsI32x3) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("integerlist", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:integerlist: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.Integerlist)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Integerlist {
		if err := oprot.WriteListBegin(thrift.LIST, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := oprot.WriteI32(int32(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:integerlist: ", p), err)
	}
	return err
}

func (p *NestedListsI32x3) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"NestedListsI32x3({integerlist: %v})",
		p.GetIntegerlist(),
	)
}

// Attributes:
//   - IntSetList
//   - MapIntStrset
//   - MapIntStrsetList
type NestedMixedx2 struct {
	IntSetList       []map[int32]bool            `thrift:"int_set_list,1" json:"int_set_list"`
	MapIntStrset     map[int32]map[string]bool   `thrift:"map_int_strset,2" json:"map_int_strset"`
	MapIntStrsetList []map[int32]map[string]bool `thrift:"map_int_strset_list,3" json:"map_int_strset_list"`
}

func NewNestedMixedx2() *NestedMixedx2 {
	return &NestedMixedx2{}
}

var nestedMixedx2StructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "NestedMixedx2",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "int_set_list",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "map_int_strset",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "map_int_strset_list",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *NestedMixedx2) StructDefinition() thrift.StructDefinition {
	return nestedMixedx2StructDefinition
}

func (p *NestedMixedx2) GetIntSetList() []map[int32]bool {
	return p.IntSetList
}

func (p *NestedMixedx2) SetIntSetList(v []map[int32]bool) {
	p.IntSetList = v
}

func (p *NestedMixedx2) GetMapIntStrset() map[int32]map[string]bool {
	return p.MapIntStrset
}

func (p *NestedMixedx2) SetMapIntStrset(v map[int32]map[string]bool) {
	p.MapIntStrset = v
}

func (p *NestedMixedx2) GetMapIntStrsetList() []map[int32]map[string]bool {
	return p.MapIntStrsetList
}

func (p *NestedMixedx2) SetMapIntStrsetList(v []map[int32]map[string]bool) {
	p.MapIntStrsetList = v
}
func (p *NestedMixedx2) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NestedMixedx2) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[int32]bool, 0, size)
	p.IntSetList = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make(map[int32]bool, size)
		_elem19 := tSet
		for i := 0; i < size; i++ {
			var _elem20 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem20 = v
			}
			_elem19[_elem20] = true
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.IntSetList = append(p.IntSetList, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NestedMixedx2) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]map[string]bool, size)
	p.MapIntStrset = tMap
	for i := 0; i < size; i++ {
		var _key21 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key21 = v
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make(map[string]bool, size)
		_val22 := tSet
		for i := 0; i < size; i++ {
			var _elem23 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem23 = v
			}
			_val22[_elem23] = true
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.MapIntStrset[_key21] = _val22
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *NestedMixedx2) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[int32]map[string]bool, 0, size)
	p.MapIntStrsetList = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[int32]map[string]bool, size)
		_elem24 := tMap
		for i := 0; i < size; i++ {
			var _key25 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key25 = v
			}
			_, size, err := iprot.ReadSetBegin()
			if err != nil {
				return thrift.PrependError("error reading set begin: ", err)
			}
			tSet := make(map[string]bool, size)
			_val26 := tSet
			for i := 0; i < size; i++ {
				var _elem27 string
				if v, err := iprot.ReadString(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					_elem27 = v
				}
				_val26[_elem27] = true
			}
			if err := iprot.ReadSetEnd(); err != nil {
				return thrift.PrependError("error reading set end: ", err)
			}
			_elem24[_key25] = _val26
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.MapIntStrsetList = append(p.MapIntStrsetList, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NestedMixedx2) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NestedMixedx2"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NestedMixedx2) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("int_set_list", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:int_set_list: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.SET, len(p.IntSetList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.IntSetList {
		if err := oprot.WriteSetBegin(thrift.I32, len(v)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range v {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:int_set_list: ", p), err)
	}
	return err
}

func (p *NestedMixedx2) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("map_int_strset", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:map_int_strset: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.SET, len(p.MapIntStrset)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MapIntStrset {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(v)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range v {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:map_int_strset: ", p), err)
	}
	return err
}

func (p *NestedMixedx2) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("map_int_strset_list", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:map_int_strset_list: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.MAP, len(p.MapIntStrsetList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MapIntStrsetList {
		if err := oprot.WriteMapBegin(thrift.I32, thrift.SET, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteSetBegin(thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing set begin: ", err)
			}
			for v, _ := range v {
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return thrift.PrependError("error writing set end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:map_int_strset_list: ", p), err)
	}
	return err
}

func (p *NestedMixedx2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"NestedMixedx2({int_set_list: %v, map_int_strset: %v, map_int_strset_list: %v})",
		p.GetIntSetList(),
		p.GetMapIntStrset(),
		p.GetMapIntStrsetList(),
	)
}

// Attributes:
//   - Bonk
type ListBonks struct {
	Bonk []*Bonk `thrift:"bonk,1" json:"bonk"`
}

func NewListBonks() *ListBonks {
	return &ListBonks{}
}

var listBonksStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "ListBonks",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "bonk",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ListBonks) StructDefinition() thrift.StructDefinition {
	return listBonksStructDefinition
}

func (p *ListBonks) GetBonk() []*Bonk {
	return p.Bonk
}

func (p *ListBonks) SetBonk(v []*Bonk) {
	p.Bonk = v
}
func (p *ListBonks) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListBonks) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Bonk, 0, size)
	p.Bonk = tSlice
	for i := 0; i < size; i++ {
		_elem28 := NewBonk()
		if err := _elem28.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
		}
		p.Bonk = append(p.Bonk, _elem28)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListBonks) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListBonks"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListBonks) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bonk", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bonk: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Bonk)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Bonk {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bonk: ", p), err)
	}
	return err
}

func (p *ListBonks) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ListBonks({bonk: %v})",
		p.GetBonk(),
	)
}

// Attributes:
//   - Bonk
type NestedListsBonk struct {
	Bonk [][][]*Bonk `thrift:"bonk,1" json:"bonk"`
}

func NewNestedListsBonk() *NestedListsBonk {
	return &NestedListsBonk{}
}

var nestedListsBonkStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "NestedListsBonk",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "bonk",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *NestedListsBonk) StructDefinition() thrift.StructDefinition {
	return nestedListsBonkStructDefinition
}

func (p *NestedListsBonk) GetBonk() [][][]*Bonk {
	return p.Bonk
}

func (p *NestedListsBonk) SetBonk(v [][][]*Bonk) {
	p.Bonk = v
}
func (p *NestedListsBonk) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NestedListsBonk) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][][]*Bonk, 0, size)
	p.Bonk = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([][]*Bonk, 0, size)
		_elem29 := tSlice
		for i := 0; i < size; i++ {
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			tSlice := make([]*Bonk, 0, size)
			_elem30 := tSlice
			for i := 0; i < size; i++ {
				_elem31 := NewBonk()
				if err := _elem31.Read(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem31), err)
				}
				_elem30 = append(_elem30, _elem31)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
			_elem29 = append(_elem29, _elem30)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Bonk = append(p.Bonk, _elem29)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NestedListsBonk) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NestedListsBonk"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NestedListsBonk) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bonk", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bonk: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.Bonk)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Bonk {
		if err := oprot.WriteListBegin(thrift.LIST, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bonk: ", p), err)
	}
	return err
}

func (p *NestedListsBonk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"NestedListsBonk({bonk: %v})",
		p.GetBonk(),
	)
}

// Attributes:
//   - B
//   - S
type BoolTest struct {
	B bool   `thrift:"b,1" json:"b,omitempty"`
	S string `thrift:"s,2" json:"s,omitempty"`
}

func NewBoolTest() *BoolTest {
	return &BoolTest{
		B: true,

		S: "true",
	}
}

var boolTestStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "BoolTest",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "b",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "s",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *BoolTest) StructDefinition() thrift.StructDefinition {
	return boolTestStructDefinition
}

var BoolTest_B_DEFAULT bool = true

func (p *BoolTest) GetB() bool {
	return p.B
}

func (p *BoolTest) SetB(v bool) {
	p.B = v
}

var BoolTest_S_DEFAULT string = "true"

func (p *BoolTest) GetS() string {
	return p.S
}

func (p *BoolTest) SetS(v string) {
	p.S = v
}
func (p *BoolTest) IsSetB() bool {
	return p.B != BoolTest_B_DEFAULT
}

func (p *BoolTest) IsSetS() bool {
	return p.S != BoolTest_S_DEFAULT
}

func (p *BoolTest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BoolTest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.B = v
	}
	return nil
}

func (p *BoolTest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.S = v
	}
	return nil
}

func (p *BoolTest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BoolTest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BoolTest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetB() {
		if err := oprot.WriteFieldBegin("b", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:b: ", p), err)
		}
		if err := oprot.WriteBool(bool(p.B)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.b (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:b: ", p), err)
		}
	}
	return err
}

func (p *BoolTest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetS() {
		if err := oprot.WriteFieldBegin("s", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:s: ", p), err)
		}
		if err := oprot.WriteString(string(p.S)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.s (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:s: ", p), err)
		}
	}
	return err
}

func (p *BoolTest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"BoolTest({b: %v, s: %v})",
		p.GetB(),
		p.GetS(),
	)
}

// Attributes:
//   - S
type StructA struct {
	S string `thrift:"s,1,required" json:"s"`
}

func NewStructA() *StructA {
	return &StructA{}
}

var structAStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "StructA",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "s",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *StructA) StructDefinition() thrift.StructDefinition {
	return structAStructDefinition
}

func (p *StructA) GetS() string {
	return p.S
}

func (p *StructA) SetS(v string) {
	p.S = v
}
func (p *StructA) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetS bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetS = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetS {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field S is not set"))
	}
	return nil
}

func (p *StructA) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.S = v
	}
	return nil
}

func (p *StructA) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StructA"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StructA) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("s", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err)
	}
	if err := oprot.WriteString(string(p.S)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.s (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err)
	}
	return err
}

func (p *StructA) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"StructA({s: %v})",
		p.GetS(),
	)
}

// Attributes:
//   - Aa
//   - Ab
type StructB struct {
	Aa *StructA `thrift:"aa,1" json:"aa,omitempty"`
	Ab *StructA `thrift:"ab,2,required" json:"ab"`
}

func NewStructB() *StructB {
	return &StructB{}
}

var structBStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "StructB",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "aa",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "ab",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *StructB) StructDefinition() thrift.StructDefinition {
	return structBStructDefinition
}

var StructB_Aa_DEFAULT *StructA

func (p *StructB) GetAa() *StructA {
	if !p.IsSetAa() {
		return StructB_Aa_DEFAULT
	}
	return p.Aa
}

func (p *StructB) SetAa(v *StructA) {
	p.Aa = v
}

var StructB_Ab_DEFAULT *StructA

func (p *StructB) GetAb() *StructA {
	if !p.IsSetAb() {
		return StructB_Ab_DEFAULT
	}
	return p.Ab
}

func (p *StructB) SetAb(v *StructA) {
	p.Ab = v
}
func (p *StructB) IsSetAa() bool {
	return p.Aa != nil
}

func (p *StructB) IsSetAb() bool {
	return p.Ab != nil
}

func (p *StructB) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAb bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetAb = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAb {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ab is not set"))
	}
	return nil
}

func (p *StructB) ReadField1(iprot thrift.TProtocol) error {
	p.Aa = NewStructA()
	if err := p.Aa.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aa), err)
	}
	return nil
}

func (p *StructB) ReadField2(iprot thrift.TProtocol) error {
	p.Ab = NewStructA()
	if err := p.Ab.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ab), err)
	}
	return nil
}

func (p *StructB) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StructB"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StructB) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAa() {
		if err := oprot.WriteFieldBegin("aa", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aa: ", p), err)
		}
		if err := p.Aa.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aa), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aa: ", p), err)
		}
	}
	return err
}

func (p *StructB) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ab", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ab: ", p), err)
	}
	if err := p.Ab.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ab), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ab: ", p), err)
	}
	return err
}

func (p *StructB) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"StructB({aa: %v, ab: %v})",
		p.GetAa(),
		p.GetAb(),
	)
}
