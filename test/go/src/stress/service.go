// Autogenerated by Thrift Compiler ()
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package stress

import (
	"bytes"
	"fmt"
	"github.com/upfluence/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type Service interface {
	EchoVoid(ctx thrift.Context) (err error)
	// Parameters:
	//  - Arg
	EchoByte(ctx thrift.Context, arg int8) (res int8, err error)
	// Parameters:
	//  - Arg
	EchoI32(ctx thrift.Context, arg int32) (res int32, err error)
	// Parameters:
	//  - Arg
	EchoI64(ctx thrift.Context, arg int64) (res int64, err error)
	// Parameters:
	//  - Arg
	EchoString(ctx thrift.Context, arg string) (res string, err error)
	// Parameters:
	//  - Arg
	EchoList(ctx thrift.Context, arg []int8) (res []int8, err error)
	// Parameters:
	//  - Arg
	EchoSet(ctx thrift.Context, arg map[int8]bool) (res map[int8]bool, err error)
	// Parameters:
	//  - Arg
	EchoMap(ctx thrift.Context, arg map[int8]int8) (res map[int8]int8, err error)
}

var serviceServiceDefinition = thrift.ServiceDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "Service",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Functions: []thrift.FunctionDefinition{
		{
			Result: &serviceEchoVoidResultStructDefinition,
			Args:   serviceEchoVoidArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "echoVoid",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &serviceEchoByteResultStructDefinition,
			Args:   serviceEchoByteArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "echoByte",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &serviceEchoI32ResultStructDefinition,
			Args:   serviceEchoI32ArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "echoI32",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &serviceEchoI64ResultStructDefinition,
			Args:   serviceEchoI64ArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "echoI64",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &serviceEchoStringResultStructDefinition,
			Args:   serviceEchoStringArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "echoString",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &serviceEchoListResultStructDefinition,
			Args:   serviceEchoListArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "echoList",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &serviceEchoSetResultStructDefinition,
			Args:   serviceEchoSetArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "echoSet",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			Result: &serviceEchoMapResultStructDefinition,
			Args:   serviceEchoMapArgsStructDefinition,
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "echoMap",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

type ServiceClient struct {
	thrift.TClient
}

func NewServiceClientFactoryProvider(p thrift.TClientProvider) (*ServiceClient, error) {
	cl, err := p.Build("", "Service")

	if err != nil {
		return nil, err
	}

	return NewServiceClient(cl), nil
}

func NewServiceClient(cl thrift.TClient) *ServiceClient {
	return &ServiceClient{TClient: cl}
}

func (p *ServiceClient) EchoVoid(ctx thrift.Context) (err error) {
	args := ServiceEchoVoidArgs{}
	result := ServiceEchoVoidResult{}
	if err = p.CallBinary(ctx, "echoVoid", &args, &result); err != nil {
		return err
	}

	return nil
}

// Parameters:
//   - Arg
func (p *ServiceClient) EchoByte(ctx thrift.Context, arg int8) (res int8, err error) {
	args := ServiceEchoByteArgs{
		Arg: arg,
	}
	result := ServiceEchoByteResult{}
	if err = p.CallBinary(ctx, "echoByte", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "echoByte failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Parameters:
//   - Arg
func (p *ServiceClient) EchoI32(ctx thrift.Context, arg int32) (res int32, err error) {
	args := ServiceEchoI32Args{
		Arg: arg,
	}
	result := ServiceEchoI32Result{}
	if err = p.CallBinary(ctx, "echoI32", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "echoI32 failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Parameters:
//   - Arg
func (p *ServiceClient) EchoI64(ctx thrift.Context, arg int64) (res int64, err error) {
	args := ServiceEchoI64Args{
		Arg: arg,
	}
	result := ServiceEchoI64Result{}
	if err = p.CallBinary(ctx, "echoI64", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "echoI64 failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Parameters:
//   - Arg
func (p *ServiceClient) EchoString(ctx thrift.Context, arg string) (res string, err error) {
	args := ServiceEchoStringArgs{
		Arg: arg,
	}
	result := ServiceEchoStringResult{}
	if err = p.CallBinary(ctx, "echoString", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "echoString failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Parameters:
//   - Arg
func (p *ServiceClient) EchoList(ctx thrift.Context, arg []int8) (res []int8, err error) {
	args := ServiceEchoListArgs{
		Arg: arg,
	}
	result := ServiceEchoListResult{}
	if err = p.CallBinary(ctx, "echoList", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "echoList failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Parameters:
//   - Arg
func (p *ServiceClient) EchoSet(ctx thrift.Context, arg map[int8]bool) (res map[int8]bool, err error) {
	args := ServiceEchoSetArgs{
		Arg: arg,
	}
	result := ServiceEchoSetResult{}
	if err = p.CallBinary(ctx, "echoSet", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "echoSet failed: unknown result")
	}

	return result.GetSuccess(), nil
}

// Parameters:
//   - Arg
func (p *ServiceClient) EchoMap(ctx thrift.Context, arg map[int8]int8) (res map[int8]int8, err error) {
	args := ServiceEchoMapArgs{
		Arg: arg,
	}
	result := ServiceEchoMapResult{}
	if err = p.CallBinary(ctx, "echoMap", &args, &result); err != nil {
		return res, err
	}

	if !result.IsSetSuccess() {
		return res, thrift.NewTApplicationException(thrift.MISSING_RESULT, "echoMap failed: unknown result")
	}

	return result.GetSuccess(), nil
}

func NewServiceProcessorProvider(handler Service, provider thrift.TProcessorProvider) (thrift.TProcessor, error) {
	p, err := provider.Build("", "Service")
	if err != nil {
		return nil, err
	}

	return NewServiceProcessorFactory(handler, p), nil
}

func NewServiceProcessor(handler Service, middlewares []thrift.TMiddleware) thrift.TProcessor {
	p := thrift.NewTStandardProcessor(middlewares)
	return NewServiceProcessorFactory(handler, p)
}

func NewServiceProcessorFactory(handler Service, p thrift.TProcessor) thrift.TProcessor {
	p.AddProcessor(
		"echoVoid",
		thrift.NewTBinaryProcessorFunction(p, "echoVoid", func() thrift.TRequest { return &ServiceEchoVoidArgs{} }, &serviceProcessorEchoVoid{handler: handler}),
	)
	p.AddProcessor(
		"echoByte",
		thrift.NewTBinaryProcessorFunction(p, "echoByte", func() thrift.TRequest { return &ServiceEchoByteArgs{} }, &serviceProcessorEchoByte{handler: handler}),
	)
	p.AddProcessor(
		"echoI32",
		thrift.NewTBinaryProcessorFunction(p, "echoI32", func() thrift.TRequest { return &ServiceEchoI32Args{} }, &serviceProcessorEchoI32{handler: handler}),
	)
	p.AddProcessor(
		"echoI64",
		thrift.NewTBinaryProcessorFunction(p, "echoI64", func() thrift.TRequest { return &ServiceEchoI64Args{} }, &serviceProcessorEchoI64{handler: handler}),
	)
	p.AddProcessor(
		"echoString",
		thrift.NewTBinaryProcessorFunction(p, "echoString", func() thrift.TRequest { return &ServiceEchoStringArgs{} }, &serviceProcessorEchoString{handler: handler}),
	)
	p.AddProcessor(
		"echoList",
		thrift.NewTBinaryProcessorFunction(p, "echoList", func() thrift.TRequest { return &ServiceEchoListArgs{} }, &serviceProcessorEchoList{handler: handler}),
	)
	p.AddProcessor(
		"echoSet",
		thrift.NewTBinaryProcessorFunction(p, "echoSet", func() thrift.TRequest { return &ServiceEchoSetArgs{} }, &serviceProcessorEchoSet{handler: handler}),
	)
	p.AddProcessor(
		"echoMap",
		thrift.NewTBinaryProcessorFunction(p, "echoMap", func() thrift.TRequest { return &ServiceEchoMapArgs{} }, &serviceProcessorEchoMap{handler: handler}),
	)
	return p
}

type serviceProcessorEchoVoid struct {
	handler Service
}

func (p *serviceProcessorEchoVoid) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	err2 := p.handler.EchoVoid(ctx)
	result := &ServiceEchoVoidResult{}
	if err2 != nil {
		return nil, err2
	}

	return result, nil
}

type serviceProcessorEchoByte struct {
	handler Service
}

func (p *serviceProcessorEchoByte) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ServiceEchoByteArgs)
	retval, err2 := p.handler.EchoByte(ctx, args.Arg)
	result := &ServiceEchoByteResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

type serviceProcessorEchoI32 struct {
	handler Service
}

func (p *serviceProcessorEchoI32) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ServiceEchoI32Args)
	retval, err2 := p.handler.EchoI32(ctx, args.Arg)
	result := &ServiceEchoI32Result{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

type serviceProcessorEchoI64 struct {
	handler Service
}

func (p *serviceProcessorEchoI64) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ServiceEchoI64Args)
	retval, err2 := p.handler.EchoI64(ctx, args.Arg)
	result := &ServiceEchoI64Result{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

type serviceProcessorEchoString struct {
	handler Service
}

func (p *serviceProcessorEchoString) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ServiceEchoStringArgs)
	retval, err2 := p.handler.EchoString(ctx, args.Arg)
	result := &ServiceEchoStringResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

type serviceProcessorEchoList struct {
	handler Service
}

func (p *serviceProcessorEchoList) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ServiceEchoListArgs)
	retval, err2 := p.handler.EchoList(ctx, args.Arg)
	result := &ServiceEchoListResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type serviceProcessorEchoSet struct {
	handler Service
}

func (p *serviceProcessorEchoSet) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ServiceEchoSetArgs)
	retval, err2 := p.handler.EchoSet(ctx, args.Arg)
	result := &ServiceEchoSetResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type serviceProcessorEchoMap struct {
	handler Service
}

func (p *serviceProcessorEchoMap) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*ServiceEchoMapArgs)
	retval, err2 := p.handler.EchoMap(ctx, args.Arg)
	result := &ServiceEchoMapResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

// HELPER FUNCTIONS AND STRUCTURES

type ServiceEchoVoidArgs struct {
}

func NewServiceEchoVoidArgs() *ServiceEchoVoidArgs {
	return &ServiceEchoVoidArgs{}
}

var serviceEchoVoidArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoVoid_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{},
}

func (p *ServiceEchoVoidArgs) StructDefinition() thrift.StructDefinition {
	return serviceEchoVoidArgsStructDefinition
}

func (p *ServiceEchoVoidArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoVoidArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoVoid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoVoidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoVoidArgs({})",
	)
}

func (p *ServiceEchoVoidResult) GetResult() interface{} {
	return nil

}

func (p *ServiceEchoVoidResult) GetError() error {
	return nil

}

type ServiceEchoVoidResult struct {
}

func NewServiceEchoVoidResult() *ServiceEchoVoidResult {
	return &ServiceEchoVoidResult{}
}

var serviceEchoVoidResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoVoid_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{},
}

func (p *ServiceEchoVoidResult) StructDefinition() thrift.StructDefinition {
	return serviceEchoVoidResultStructDefinition
}

func (p *ServiceEchoVoidResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoVoidResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoVoid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoVoidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoVoidResult({})",
	)
}

// Attributes:
//  - Arg
type ServiceEchoByteArgs struct {
	Arg int8 `thrift:"arg,1" json:"arg"`
}

func NewServiceEchoByteArgs() *ServiceEchoByteArgs {
	return &ServiceEchoByteArgs{}
}

var serviceEchoByteArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoByte_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoByteArgs) StructDefinition() thrift.StructDefinition {
	return serviceEchoByteArgsStructDefinition
}

func (p *ServiceEchoByteArgs) GetArg() int8 {
	return p.Arg
}

func (p *ServiceEchoByteArgs) SetArg(v int8) {
	p.Arg = v
}
func (p *ServiceEchoByteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoByteArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.Arg = temp
	}
	return nil
}

func (p *ServiceEchoByteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoByte_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoByteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err)
	}
	if err := oprot.WriteByte(byte(p.Arg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err)
	}
	return err
}

func (p *ServiceEchoByteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoByteArgs({arg: %v})",
		p.GetArg(),
	)
}

func (p *ServiceEchoByteResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ServiceEchoByteResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ServiceEchoByteResult struct {
	Success *int8 `thrift:"success,0" json:"success,omitempty"`
}

func NewServiceEchoByteResult() *ServiceEchoByteResult {
	return &ServiceEchoByteResult{}
}

var serviceEchoByteResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoByte_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoByteResult) StructDefinition() thrift.StructDefinition {
	return serviceEchoByteResultStructDefinition
}

var ServiceEchoByteResult_Success_DEFAULT int8

func (p *ServiceEchoByteResult) GetSuccess() int8 {
	if !p.IsSetSuccess() {
		return ServiceEchoByteResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *ServiceEchoByteResult) SetSuccess(v int8) {
	p.Success = &v
}
func (p *ServiceEchoByteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServiceEchoByteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoByteResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := int8(v)
		p.Success = &temp
	}
	return nil
}

func (p *ServiceEchoByteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoByte_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoByteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BYTE, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteByte(byte(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ServiceEchoByteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoByteResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Arg
type ServiceEchoI32Args struct {
	Arg int32 `thrift:"arg,1" json:"arg"`
}

func NewServiceEchoI32Args() *ServiceEchoI32Args {
	return &ServiceEchoI32Args{}
}

var serviceEchoI32ArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoI32_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoI32Args) StructDefinition() thrift.StructDefinition {
	return serviceEchoI32ArgsStructDefinition
}

func (p *ServiceEchoI32Args) GetArg() int32 {
	return p.Arg
}

func (p *ServiceEchoI32Args) SetArg(v int32) {
	p.Arg = v
}
func (p *ServiceEchoI32Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoI32Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Arg = v
	}
	return nil
}

func (p *ServiceEchoI32Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoI32_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoI32Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Arg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err)
	}
	return err
}

func (p *ServiceEchoI32Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoI32Args({arg: %v})",
		p.GetArg(),
	)
}

func (p *ServiceEchoI32Result) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ServiceEchoI32Result) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ServiceEchoI32Result struct {
	Success *int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewServiceEchoI32Result() *ServiceEchoI32Result {
	return &ServiceEchoI32Result{}
}

var serviceEchoI32ResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoI32_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoI32Result) StructDefinition() thrift.StructDefinition {
	return serviceEchoI32ResultStructDefinition
}

var ServiceEchoI32Result_Success_DEFAULT int32

func (p *ServiceEchoI32Result) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ServiceEchoI32Result_Success_DEFAULT
	}
	return *p.Success
}

func (p *ServiceEchoI32Result) SetSuccess(v int32) {
	p.Success = &v
}
func (p *ServiceEchoI32Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServiceEchoI32Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoI32Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ServiceEchoI32Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoI32_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoI32Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ServiceEchoI32Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoI32Result({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Arg
type ServiceEchoI64Args struct {
	Arg int64 `thrift:"arg,1" json:"arg"`
}

func NewServiceEchoI64Args() *ServiceEchoI64Args {
	return &ServiceEchoI64Args{}
}

var serviceEchoI64ArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoI64_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoI64Args) StructDefinition() thrift.StructDefinition {
	return serviceEchoI64ArgsStructDefinition
}

func (p *ServiceEchoI64Args) GetArg() int64 {
	return p.Arg
}

func (p *ServiceEchoI64Args) SetArg(v int64) {
	p.Arg = v
}
func (p *ServiceEchoI64Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoI64Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Arg = v
	}
	return nil
}

func (p *ServiceEchoI64Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoI64_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoI64Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Arg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err)
	}
	return err
}

func (p *ServiceEchoI64Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoI64Args({arg: %v})",
		p.GetArg(),
	)
}

func (p *ServiceEchoI64Result) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ServiceEchoI64Result) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ServiceEchoI64Result struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewServiceEchoI64Result() *ServiceEchoI64Result {
	return &ServiceEchoI64Result{}
}

var serviceEchoI64ResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoI64_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoI64Result) StructDefinition() thrift.StructDefinition {
	return serviceEchoI64ResultStructDefinition
}

var ServiceEchoI64Result_Success_DEFAULT int64

func (p *ServiceEchoI64Result) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return ServiceEchoI64Result_Success_DEFAULT
	}
	return *p.Success
}

func (p *ServiceEchoI64Result) SetSuccess(v int64) {
	p.Success = &v
}
func (p *ServiceEchoI64Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServiceEchoI64Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoI64Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ServiceEchoI64Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoI64_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoI64Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ServiceEchoI64Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoI64Result({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Arg
type ServiceEchoStringArgs struct {
	Arg string `thrift:"arg,1" json:"arg"`
}

func NewServiceEchoStringArgs() *ServiceEchoStringArgs {
	return &ServiceEchoStringArgs{}
}

var serviceEchoStringArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoString_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoStringArgs) StructDefinition() thrift.StructDefinition {
	return serviceEchoStringArgsStructDefinition
}

func (p *ServiceEchoStringArgs) GetArg() string {
	return p.Arg
}

func (p *ServiceEchoStringArgs) SetArg(v string) {
	p.Arg = v
}
func (p *ServiceEchoStringArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoStringArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Arg = v
	}
	return nil
}

func (p *ServiceEchoStringArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoString_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoStringArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Arg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err)
	}
	return err
}

func (p *ServiceEchoStringArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoStringArgs({arg: %v})",
		p.GetArg(),
	)
}

func (p *ServiceEchoStringResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ServiceEchoStringResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ServiceEchoStringResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewServiceEchoStringResult() *ServiceEchoStringResult {
	return &ServiceEchoStringResult{}
}

var serviceEchoStringResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoString_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoStringResult) StructDefinition() thrift.StructDefinition {
	return serviceEchoStringResultStructDefinition
}

var ServiceEchoStringResult_Success_DEFAULT string

func (p *ServiceEchoStringResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ServiceEchoStringResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *ServiceEchoStringResult) SetSuccess(v string) {
	p.Success = &v
}
func (p *ServiceEchoStringResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServiceEchoStringResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoStringResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ServiceEchoStringResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoString_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoStringResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ServiceEchoStringResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoStringResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Arg
type ServiceEchoListArgs struct {
	Arg []int8 `thrift:"arg,1" json:"arg"`
}

func NewServiceEchoListArgs() *ServiceEchoListArgs {
	return &ServiceEchoListArgs{}
}

var serviceEchoListArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoList_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoListArgs) StructDefinition() thrift.StructDefinition {
	return serviceEchoListArgsStructDefinition
}

func (p *ServiceEchoListArgs) GetArg() []int8 {
	return p.Arg
}

func (p *ServiceEchoListArgs) SetArg(v []int8) {
	p.Arg = v
}
func (p *ServiceEchoListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoListArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int8, 0, size)
	p.Arg = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_elem0 = temp
		}
		p.Arg = append(p.Arg, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ServiceEchoListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.BYTE, len(p.Arg)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Arg {
		if err := oprot.WriteByte(byte(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err)
	}
	return err
}

func (p *ServiceEchoListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoListArgs({arg: %v})",
		p.GetArg(),
	)
}

func (p *ServiceEchoListResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ServiceEchoListResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ServiceEchoListResult struct {
	Success []int8 `thrift:"success,0" json:"success,omitempty"`
}

func NewServiceEchoListResult() *ServiceEchoListResult {
	return &ServiceEchoListResult{}
}

var serviceEchoListResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoList_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoListResult) StructDefinition() thrift.StructDefinition {
	return serviceEchoListResultStructDefinition
}

var ServiceEchoListResult_Success_DEFAULT []int8

func (p *ServiceEchoListResult) GetSuccess() []int8 {
	return p.Success
}

func (p *ServiceEchoListResult) SetSuccess(v []int8) {
	p.Success = v
}
func (p *ServiceEchoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServiceEchoListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int8, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem1 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_elem1 = temp
		}
		p.Success = append(p.Success, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ServiceEchoListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.BYTE, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteByte(byte(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ServiceEchoListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoListResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Arg
type ServiceEchoSetArgs struct {
	Arg map[int8]bool `thrift:"arg,1" json:"arg"`
}

func NewServiceEchoSetArgs() *ServiceEchoSetArgs {
	return &ServiceEchoSetArgs{}
}

var serviceEchoSetArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoSet_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoSetArgs) StructDefinition() thrift.StructDefinition {
	return serviceEchoSetArgsStructDefinition
}

func (p *ServiceEchoSetArgs) GetArg() map[int8]bool {
	return p.Arg
}

func (p *ServiceEchoSetArgs) SetArg(v map[int8]bool) {
	p.Arg = v
}
func (p *ServiceEchoSetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoSetArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[int8]bool, size)
	p.Arg = tSet
	for i := 0; i < size; i++ {
		var _elem2 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_elem2 = temp
		}
		p.Arg[_elem2] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *ServiceEchoSetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoSet_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg", thrift.SET, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.BYTE, len(p.Arg)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Arg {
		if err := oprot.WriteByte(byte(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err)
	}
	return err
}

func (p *ServiceEchoSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoSetArgs({arg: %v})",
		p.GetArg(),
	)
}

func (p *ServiceEchoSetResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ServiceEchoSetResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ServiceEchoSetResult struct {
	Success map[int8]bool `thrift:"success,0" json:"success,omitempty"`
}

func NewServiceEchoSetResult() *ServiceEchoSetResult {
	return &ServiceEchoSetResult{}
}

var serviceEchoSetResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoSet_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoSetResult) StructDefinition() thrift.StructDefinition {
	return serviceEchoSetResultStructDefinition
}

var ServiceEchoSetResult_Success_DEFAULT map[int8]bool

func (p *ServiceEchoSetResult) GetSuccess() map[int8]bool {
	return p.Success
}

func (p *ServiceEchoSetResult) SetSuccess(v map[int8]bool) {
	p.Success = v
}
func (p *ServiceEchoSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServiceEchoSetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoSetResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[int8]bool, size)
	p.Success = tSet
	for i := 0; i < size; i++ {
		var _elem3 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_elem3 = temp
		}
		p.Success[_elem3] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *ServiceEchoSetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoSet_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.BYTE, len(p.Success)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Success {
			if err := oprot.WriteByte(byte(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ServiceEchoSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoSetResult({success: %v})",
		p.GetSuccess(),
	)
}

// Attributes:
//  - Arg
type ServiceEchoMapArgs struct {
	Arg map[int8]int8 `thrift:"arg,1" json:"arg"`
}

func NewServiceEchoMapArgs() *ServiceEchoMapArgs {
	return &ServiceEchoMapArgs{}
}

var serviceEchoMapArgsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoMap_args",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "arg",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoMapArgs) StructDefinition() thrift.StructDefinition {
	return serviceEchoMapArgsStructDefinition
}

func (p *ServiceEchoMapArgs) GetArg() map[int8]int8 {
	return p.Arg
}

func (p *ServiceEchoMapArgs) SetArg(v map[int8]int8) {
	p.Arg = v
}
func (p *ServiceEchoMapArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoMapArgs) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int8]int8, size)
	p.Arg = tMap
	for i := 0; i < size; i++ {
		var _key4 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_key4 = temp
		}
		var _val5 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_val5 = temp
		}
		p.Arg[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ServiceEchoMapArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoMap_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.BYTE, thrift.BYTE, len(p.Arg)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Arg {
		if err := oprot.WriteByte(byte(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteByte(byte(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err)
	}
	return err
}

func (p *ServiceEchoMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoMapArgs({arg: %v})",
		p.GetArg(),
	)
}

func (p *ServiceEchoMapResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *ServiceEchoMapResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type ServiceEchoMapResult struct {
	Success map[int8]int8 `thrift:"success,0" json:"success,omitempty"`
}

func NewServiceEchoMapResult() *ServiceEchoMapResult {
	return &ServiceEchoMapResult{}
}

var serviceEchoMapResultStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "echoMap_result",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "success",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *ServiceEchoMapResult) StructDefinition() thrift.StructDefinition {
	return serviceEchoMapResultStructDefinition
}

var ServiceEchoMapResult_Success_DEFAULT map[int8]int8

func (p *ServiceEchoMapResult) GetSuccess() map[int8]int8 {
	return p.Success
}

func (p *ServiceEchoMapResult) SetSuccess(v map[int8]int8) {
	p.Success = v
}
func (p *ServiceEchoMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServiceEchoMapResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceEchoMapResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int8]int8, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key6 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_key6 = temp
		}
		var _val7 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_val7 = temp
		}
		p.Success[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ServiceEchoMapResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echoMap_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceEchoMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.BYTE, thrift.BYTE, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteByte(byte(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteByte(byte(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ServiceEchoMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ServiceEchoMapResult({success: %v})",
		p.GetSuccess(),
	)
}
